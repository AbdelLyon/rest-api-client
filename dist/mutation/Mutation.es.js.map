{"version":3,"file":"Mutation.es.js","sources":["../../src/mutation/Mutation.ts"],"sourcesContent":["import type { DeleteRequest, DeleteResponse } from \"@/mutation/types/delete\";\nimport type { ActionRequest, ActionResponse } from \"@/mutation/types/action\";\nimport type { BuildOnly, MutationResponse } from \"@/mutation/types/mutation\";\nimport type { RequestConfig } from \"@/http/types/http\";\nimport type { IRelationBuilder } from \"@/mutation/interface/IRelationBuilder\";\nimport type { IMutation } from \"@/mutation/interface/IMutation\";\nimport type { IEntityBuilder } from \"@/mutation/interface/IEntityBuilder\";\nimport { z } from \"zod\";\nimport { HttpClient } from \"@/http/HttpClient\";\nimport { Builder } from \"@/mutation/Builder\";\n\nexport abstract class Mutation<T> implements IMutation<T> {\n  protected http: HttpClient;\n  protected pathname: string;\n  protected schema: z.ZodType<T>;\n\n  private readonly relation: IRelationBuilder;\n\n  constructor (pathname: string, schema: z.ZodType<T>) {\n    this.http = HttpClient.getInstance();\n    this.pathname = pathname;\n    this.schema = schema;\n\n    this.relation = Builder.getRelationBuilder();\n  }\n\n  public entityBuilder(): IEntityBuilder<T> {\n    const builder = Builder.createEntityBuilder<T>(this.relation);\n    builder.setMutationFunction((data, options) => this.mutate(data, options));\n    return builder;\n  }\n\n  public relationBuilder(): IRelationBuilder {\n    return this.relation;\n  }\n\n\n  private validateData(data: unknown[]): T[] {\n    return data.map((item) => {\n      const result = this.schema.safeParse(item);\n      if (!result.success) {\n        console.error(\"Type validation failed:\", result.error.errors);\n        throw new Error(\n          `Type validation failed: ${JSON.stringify(result.error.errors)}`,\n        );\n      }\n      return result.data;\n    });\n  }\n\n  public async mutate(\n    mutateRequest: BuildOnly<T> | { mutate: Array<any>; },\n    options?: Partial<RequestConfig>\n  ): Promise<MutationResponse> {\n\n    const data = 'build' in mutateRequest ? mutateRequest.build() : mutateRequest;\n\n    const response = await this.http.request<MutationResponse>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/mutate`,\n        data,\n      },\n      options,\n    );\n\n    return response;\n  }\n\n  public executeAction(\n    actionRequest: ActionRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<ActionResponse> {\n    return this.http.request<ActionResponse>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/actions/${actionRequest.action}`,\n        data: actionRequest.payload,\n      },\n      options,\n    );\n  }\n\n  public async delete(\n    request: DeleteRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"DELETE\",\n        url: this.pathname,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public async forceDelete(\n    request: DeleteRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"DELETE\",\n        url: `${this.pathname}/force`,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public async restore(\n    request: DeleteRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/restore`,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n}"],"names":["Mutation","pathname","schema","__publicField","HttpClient","Builder","builder","data","options","item","result","mutateRequest","actionRequest","request","response"],"mappings":";;;;;AAWO,MAAeA,EAAoC;AAAA,EAOxD,YAAaC,GAAkBC,GAAsB;AAN3C,IAAAC,EAAA;AACA,IAAAA,EAAA;AACA,IAAAA,EAAA;AAEO,IAAAA,EAAA;AAGV,SAAA,OAAOC,EAAW,YAAY,GACnC,KAAK,WAAWH,GAChB,KAAK,SAASC,GAET,KAAA,WAAWG,EAAQ,mBAAmB;AAAA,EAAA;AAAA,EAGtC,gBAAmC;AACxC,UAAMC,IAAUD,EAAQ,oBAAuB,KAAK,QAAQ;AACpD,WAAAC,EAAA,oBAAoB,CAACC,GAAMC,MAAY,KAAK,OAAOD,GAAMC,CAAO,CAAC,GAClEF;AAAA,EAAA;AAAA,EAGF,kBAAoC;AACzC,WAAO,KAAK;AAAA,EAAA;AAAA,EAIN,aAAaC,GAAsB;AAClC,WAAAA,EAAK,IAAI,CAACE,MAAS;AACxB,YAAMC,IAAS,KAAK,OAAO,UAAUD,CAAI;AACrC,UAAA,CAACC,EAAO;AACV,sBAAQ,MAAM,2BAA2BA,EAAO,MAAM,MAAM,GACtD,IAAI;AAAA,UACR,2BAA2B,KAAK,UAAUA,EAAO,MAAM,MAAM,CAAC;AAAA,QAChE;AAEF,aAAOA,EAAO;AAAA,IAAA,CACf;AAAA,EAAA;AAAA,EAGH,MAAa,OACXC,GACAH,GAC2B;AAE3B,UAAMD,IAAO,WAAWI,IAAgBA,EAAc,MAAU,IAAAA;AAWzD,WATU,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAAJ;AAAA,MACF;AAAA,MACAC;AAAA,IACF;AAAA,EAEO;AAAA,EAGF,cACLI,GACAJ,IAAkC,IACT;AACzB,WAAO,KAAK,KAAK;AAAA,MACf;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ,YAAYI,EAAc,MAAM;AAAA,QACrD,MAAMA,EAAc;AAAA,MACtB;AAAA,MACAJ;AAAA,IACF;AAAA,EAAA;AAAA,EAGF,MAAa,OACXK,GACAL,IAAkC,IACN;AACtB,UAAAM,IAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,KAAK;AAAA,QACV,MAAMD;AAAA,MACR;AAAA,MACAL;AAAA,IACF;AAEO,WAAA;AAAA,MACL,GAAGM;AAAA,MACH,MAAM,KAAK,aAAaA,EAAS,IAAI;AAAA,IACvC;AAAA,EAAA;AAAA,EAGF,MAAa,YACXD,GACAL,IAAkC,IACN;AACtB,UAAAM,IAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAMD;AAAA,MACR;AAAA,MACAL;AAAA,IACF;AAEO,WAAA;AAAA,MACL,GAAGM;AAAA,MACH,MAAM,KAAK,aAAaA,EAAS,IAAI;AAAA,IACvC;AAAA,EAAA;AAAA,EAGF,MAAa,QACXD,GACAL,IAAkC,IACN;AACtB,UAAAM,IAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAMD;AAAA,MACR;AAAA,MACAL;AAAA,IACF;AAEO,WAAA;AAAA,MACL,GAAGM;AAAA,MACH,MAAM,KAAK,aAAaA,EAAS,IAAI;AAAA,IACvC;AAAA,EAAA;AAEJ;"}