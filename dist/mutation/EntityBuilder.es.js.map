{"version":3,"file":"EntityBuilder.es.js","sources":["../../src/mutation/EntityBuilder.ts"],"sourcesContent":["\nimport type {\n   BuildOnly,\n   ExtractModelAttributes,\n   MutationFunction,\n   MutationRequest,\n   TypedMutationOperation,\n   ValidCreateNestedRelation,\n   ValidUpdateNestedRelation,\n   CreateEntityAttributes,\n   MutationResponse\n} from \"@/mutation/types/mutation\";\nimport type { IEntityBuilder } from \"@/mutation/interface/IEntityBuilder\";\nimport type { IRelationBuilder } from \"@/mutation/interface/IRelationBuilder\";\nimport { RelationBuilder } from \"@/mutation/RelationBuilder\";\nimport { RequestConfig } from \"@/http/types/http\";\n\nexport class EntityBuilder<TModel> extends RelationBuilder implements IEntityBuilder<TModel>, BuildOnly<TModel> {\n   private operations: Array<TypedMutationOperation<TModel, any>> = [];\n   private mutationFn: MutationFunction | null = null;\n   private relationBuilder: IRelationBuilder;\n\n   constructor (relationBuilder: IRelationBuilder) {\n      super();\n      this.relationBuilder = relationBuilder;\n   }\n\n   private extractOperationData<T extends Record<string, unknown>>(\n      attributes: T\n   ): {\n      normalAttributes: Record<string, unknown>,\n      relations: Record<string, unknown>;\n   } {\n      const normalAttributes: Record<string, unknown> = {};\n      const relations: Record<string, unknown> = {};\n\n      for (const [key, value] of Object.entries(attributes)) {\n         if (value && typeof value === 'object' && 'operation' in value) {\n            relations[key] = value;\n         } else {\n            normalAttributes[key] = value;\n         }\n      }\n\n      return { normalAttributes, relations };\n   }\n\n   public setMutationFunction(fn: MutationFunction): void {\n      this.mutationFn = fn;\n   }\n\n   public createEntity<T extends Record<string, unknown>, RelationKeys extends keyof T = never>(\n      attributes: CreateEntityAttributes<T, RelationKeys>\n   ): BuildOnly<TModel, Pick<T, Extract<RelationKeys, string>>> {\n      const { normalAttributes, relations } = this.extractOperationData(attributes);\n\n      const operation: TypedMutationOperation<TModel, typeof relations> = {\n         operation: \"create\",\n         attributes: normalAttributes as ExtractModelAttributes<TModel>,\n         relations\n      };\n\n      this.operations.push(operation);\n      return this as unknown as BuildOnly<TModel, Pick<T, Extract<RelationKeys, string>>>;\n   }\n\n   public updateEntity<T extends Record<string, unknown>>(\n      key: string | number,\n      attributes: T\n   ): IEntityBuilder<TModel> {\n      const { normalAttributes, relations } = this.extractOperationData(attributes);\n\n      const operation: TypedMutationOperation<TModel, typeof relations> = {\n         operation: \"update\",\n         key,\n         attributes: normalAttributes as ExtractModelAttributes<TModel>,\n         relations\n      };\n\n      this.operations.push(operation);\n      return this;\n   }\n\n   public build(): MutationRequest<TModel, any> {\n      const result = [...this.operations];\n      this.operations = [];\n      return { mutate: result };\n   }\n\n   public async mutate(options?: Partial<RequestConfig>): Promise<MutationResponse> {\n      if (!this.mutationFn) {\n         throw new Error(\"Mutation function not provided to builder\");\n      }\n\n      const data = this.build();\n      return this.mutationFn(data, options);\n   }\n\n   public override createRelation<T extends Record<string, unknown>, RelationKeys extends keyof T = never>(\n      attributes: T,\n      relations?: Record<RelationKeys, ValidCreateNestedRelation<unknown>>\n   ) {\n      return this.relationBuilder.createRelation<T, RelationKeys>(attributes, relations);\n   }\n\n   public override updateRelation<T extends Record<string, unknown>, RelationKeys extends keyof T = never>(\n      key: string | number,\n      attributes: T,\n      relations?: Record<RelationKeys, ValidUpdateNestedRelation<unknown>>\n   ) {\n      return this.relationBuilder.updateRelation<T, RelationKeys>(key, attributes, relations);\n   }\n\n   public override attach(key: string | number) {\n      return this.relationBuilder.attach(key);\n   }\n\n   public override detach(key: string | number) {\n      return this.relationBuilder.detach(key);\n   }\n\n   public override sync<T>(\n      key: string | number | Array<string | number>,\n      attributes?: T,\n      pivot?: Record<string, string | number>,\n      withoutDetaching?: boolean\n   ) {\n      return this.relationBuilder.sync<T>(key, attributes, pivot, withoutDetaching);\n   }\n\n   public override toggle<T>(\n      key: string | number | Array<string | number>,\n      attributes?: T,\n      pivot?: Record<string, string | number>\n   ) {\n      return this.relationBuilder.toggle<T>(key, attributes, pivot);\n   }\n}"],"names":["EntityBuilder","RelationBuilder","relationBuilder","__publicField","attributes","normalAttributes","relations","key","value","fn","operation","result","options","data","pivot","withoutDetaching"],"mappings":";;;;AAiBO,MAAMA,UAA8BC,EAAqE;AAAA,EAK7G,YAAaC,GAAmC;AACvC,UAAA;AALD,IAAAC,EAAA,oBAAyD,CAAC;AAC1D,IAAAA,EAAA,oBAAsC;AACtC,IAAAA,EAAA;AAIL,SAAK,kBAAkBD;AAAA,EAAA;AAAA,EAGlB,qBACLE,GAID;AACC,UAAMC,IAA4C,CAAC,GAC7CC,IAAqC,CAAC;AAE5C,eAAW,CAACC,GAAKC,CAAK,KAAK,OAAO,QAAQJ,CAAU;AACjD,MAAII,KAAS,OAAOA,KAAU,YAAY,eAAeA,IACtDF,EAAUC,CAAG,IAAIC,IAEjBH,EAAiBE,CAAG,IAAIC;AAIvB,WAAA,EAAE,kBAAAH,GAAkB,WAAAC,EAAU;AAAA,EAAA;AAAA,EAGjC,oBAAoBG,GAA4B;AACpD,SAAK,aAAaA;AAAA,EAAA;AAAA,EAGd,aACJL,GAC0D;AAC1D,UAAM,EAAE,kBAAAC,GAAkB,WAAAC,EAAA,IAAc,KAAK,qBAAqBF,CAAU,GAEtEM,IAA8D;AAAA,MACjE,WAAW;AAAA,MACX,YAAYL;AAAA,MACZ,WAAAC;AAAA,IACH;AAEK,gBAAA,WAAW,KAAKI,CAAS,GACvB;AAAA,EAAA;AAAA,EAGH,aACJH,GACAH,GACuB;AACvB,UAAM,EAAE,kBAAAC,GAAkB,WAAAC,EAAA,IAAc,KAAK,qBAAqBF,CAAU,GAEtEM,IAA8D;AAAA,MACjE,WAAW;AAAA,MACX,KAAAH;AAAA,MACA,YAAYF;AAAA,MACZ,WAAAC;AAAA,IACH;AAEK,gBAAA,WAAW,KAAKI,CAAS,GACvB;AAAA,EAAA;AAAA,EAGH,QAAsC;AAC1C,UAAMC,IAAS,CAAC,GAAG,KAAK,UAAU;AAClC,gBAAK,aAAa,CAAC,GACZ,EAAE,QAAQA,EAAO;AAAA,EAAA;AAAA,EAG3B,MAAa,OAAOC,GAA6D;AAC1E,QAAA,CAAC,KAAK;AACD,YAAA,IAAI,MAAM,2CAA2C;AAGxD,UAAAC,IAAO,KAAK,MAAM;AACjB,WAAA,KAAK,WAAWA,GAAMD,CAAO;AAAA,EAAA;AAAA,EAGvB,eACbR,GACAE,GACD;AACC,WAAO,KAAK,gBAAgB,eAAgCF,GAAYE,CAAS;AAAA,EAAA;AAAA,EAGpE,eACbC,GACAH,GACAE,GACD;AACC,WAAO,KAAK,gBAAgB,eAAgCC,GAAKH,GAAYE,CAAS;AAAA,EAAA;AAAA,EAGzE,OAAOC,GAAsB;AACnC,WAAA,KAAK,gBAAgB,OAAOA,CAAG;AAAA,EAAA;AAAA,EAGzB,OAAOA,GAAsB;AACnC,WAAA,KAAK,gBAAgB,OAAOA,CAAG;AAAA,EAAA;AAAA,EAGzB,KACbA,GACAH,GACAU,GACAC,GACD;AACC,WAAO,KAAK,gBAAgB,KAAQR,GAAKH,GAAYU,GAAOC,CAAgB;AAAA,EAAA;AAAA,EAG/D,OACbR,GACAH,GACAU,GACD;AACC,WAAO,KAAK,gBAAgB,OAAUP,GAAKH,GAAYU,CAAK;AAAA,EAAA;AAElE;"}