{"version":3,"file":"HttpClient.es.js","sources":["../../src/http/HttpClient.ts"],"sourcesContent":["import type { HttpConfig, HttpConfigOptions, RequestConfig, RequestInterceptor, ResponseErrorInterceptor, ResponseSuccessInterceptor } from \"@/http/types/http\";\nimport type { IHttpClient } from \"@/http/interface/IHttpClient\";\nimport { ApiRequestError } from \"@/error/ApiRequestError\";\n\nexport class HttpClient implements IHttpClient {\n  private static instances: Map<string, HttpClient> = new Map();\n  private static defaultInstanceName: string;\n\n  private static requestInterceptors: RequestInterceptor[] = [];\n  private static responseSuccessInterceptors: ResponseSuccessInterceptor[] = [];\n  private static responseErrorInterceptors: ResponseErrorInterceptor[] = [];\n\n  private baseURL: string;\n  private defaultTimeout: number;\n  private defaultHeaders: Record<string, string>;\n  private withCredentials: boolean;\n  private maxRetries: number;\n\n  private constructor () {\n    this.baseURL = \"\";\n    this.defaultTimeout = 10000;\n    this.defaultHeaders = {};\n    this.withCredentials = true;\n    this.maxRetries = 3;\n  }\n\n\n  static init(config: {\n    httpConfig: HttpConfig;\n    instanceName: string;\n  }): HttpClient {\n    const { httpConfig, instanceName } = config;\n\n    HttpClient.requestInterceptors = [\n      ...HttpClient.requestInterceptors,\n      ...(httpConfig.interceptors?.request ?? [])\n    ];\n\n    if (httpConfig.interceptors?.response) {\n      HttpClient.responseSuccessInterceptors = [\n        ...HttpClient.responseSuccessInterceptors,\n        ...(httpConfig.interceptors.response.success ?? [])\n      ];\n\n      HttpClient.responseErrorInterceptors = [\n        ...HttpClient.responseErrorInterceptors,\n        ...(httpConfig.interceptors.response.error ?? [])\n      ];\n    }\n\n    if (!this.instances.has(instanceName)) {\n      const instance = new HttpClient();\n      instance.configure(httpConfig);\n      this.instances.set(instanceName, instance);\n\n      if (this.instances.size === 1) {\n        this.defaultInstanceName = instanceName;\n      }\n    }\n    return this.instances.get(instanceName)!;\n  }\n\n  static getInstance(instanceName?: string): HttpClient {\n    const name = instanceName || this.defaultInstanceName;\n\n    if (!this.instances.has(name)) {\n      throw new Error(\n        `Http instance '${name}' not initialized. Call Http.init() first.`,\n      );\n    }\n    return this.instances.get(name)!;\n  }\n\n\n  static setDefaultInstance(instanceName: string): void {\n    if (!this.instances.has(instanceName)) {\n      throw new Error(\n        `Cannot set default: Http instance '${instanceName}' not initialized.`,\n      );\n    }\n    this.defaultInstanceName = instanceName;\n  }\n\n  static getAvailableInstances(): string[] {\n    return Array.from(this.instances.keys());\n  }\n\n  static resetInstance(instanceName?: string): void {\n    if (instanceName) {\n      this.instances.delete(instanceName);\n\n      if (\n        instanceName === this.defaultInstanceName &&\n        this.instances.size > 0\n      ) {\n        this.defaultInstanceName =\n          this.instances.keys().next().value ?? \"default\";\n      }\n    } else {\n      this.instances.clear();\n      this.defaultInstanceName = \"default\";\n    }\n  }\n\n  private configure(options: HttpConfigOptions): void {\n\n    this.baseURL = this.getFullBaseUrl(options);\n    this.defaultTimeout = options.timeout ?? 10000;\n    this.maxRetries = options.maxRetries ?? 3;\n    this.withCredentials = options.withCredentials ?? true;\n\n    this.defaultHeaders = {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      ...options.headers,\n    };\n\n    this.setupDefaultInterceptors();\n  }\n\n  private getFullBaseUrl(options: HttpConfigOptions): string {\n    if (!options.baseURL) {\n      throw new Error(\"baseURL is required in HttpConfigOptions\");\n    }\n\n    let baseUrl = options.baseURL.trim();\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.slice(0, -1);\n    }\n\n    if (options.apiPrefix) {\n      let prefix = options.apiPrefix.trim();\n      if (!prefix.startsWith(\"/\")) {\n        prefix = \"/\" + prefix;\n      }\n      if (prefix.endsWith(\"/\")) {\n        prefix = prefix.slice(0, -1);\n      }\n\n      return baseUrl + prefix;\n    }\n\n    if (options.apiVersion) {\n      return `${baseUrl}/v${options.apiVersion}`;\n    }\n\n    return baseUrl;\n  }\n\n  private setupDefaultInterceptors(): void {\n\n    if (HttpClient.responseErrorInterceptors.length === 0) {\n      HttpClient.responseErrorInterceptors.push((error) => {\n        this.logError(error);\n        return Promise.reject(error);\n      });\n    }\n  }\n\n  private logError(error: any): void {\n    const errorDetails = {\n      url: error.config?.url,\n      method: error.config?.method,\n      status: error.status,\n      data: error.data,\n      message: error.message,\n    };\n\n    console.error(\"API Request Error\", errorDetails);\n  }\n\n  private async applyRequestInterceptors(config: RequestConfig): Promise<RequestConfig> {\n    let interceptedConfig = { ...config };\n\n    for (const interceptor of HttpClient.requestInterceptors) {\n      interceptedConfig = await Promise.resolve(interceptor(interceptedConfig));\n    }\n\n    return interceptedConfig;\n  }\n\n  private async applyResponseSuccessInterceptors(response: Response): Promise<Response> {\n    let interceptedResponse = response;\n\n    for (const interceptor of HttpClient.responseSuccessInterceptors) {\n      interceptedResponse = await Promise.resolve(interceptor(interceptedResponse.clone()));\n    }\n\n    return interceptedResponse;\n  }\n\n  private async applyResponseErrorInterceptors(error: any): Promise<any> {\n    let interceptedError = error;\n\n    for (const interceptor of HttpClient.responseErrorInterceptors) {\n      try {\n        interceptedError = await Promise.resolve(interceptor(interceptedError));\n\n        if (!(interceptedError instanceof Error)) {\n          return interceptedError;\n        }\n      } catch (e) {\n        interceptedError = e;\n      }\n    }\n\n    return Promise.reject(interceptedError);\n  }\n\n  private isRetryableError(status: number, method?: string): boolean {\n    const idempotentMethods = ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE'];\n    const isIdempotent = !method || idempotentMethods.includes(method.toUpperCase());\n\n    return (\n      isIdempotent && (\n        status === 0 ||\n        status === 429 ||\n        (status >= 500 && status < 600)\n      )\n    );\n  }\n\n  private async fetchWithRetry(\n    url: string,\n    config: RequestConfig,\n    attempt: number = 1\n  ): Promise<Response> {\n    try {\n      const { timeout = this.defaultTimeout, params, data, ...fetchOptions } = config;\n      let fullUrl = url;\n\n      if (params && Object.keys(params).length > 0) {\n        const queryParams = new URLSearchParams();\n        for (const [key, value] of Object.entries(params)) {\n          queryParams.append(key, value);\n        }\n        fullUrl += `?${queryParams.toString()}`;\n      }\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort('Request timeout'), timeout);\n\n      let body: any = undefined;\n      if (data !== undefined) {\n        body = typeof data === 'string' ? data : JSON.stringify(data);\n      }\n\n      const response = await fetch(fullUrl, {\n        ...fetchOptions,\n        body,\n        signal: controller.signal,\n        credentials: this.withCredentials ? 'include' : 'same-origin',\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        if (\n          attempt < this.maxRetries &&\n          this.isRetryableError(response.status, config.method)\n        ) {\n          const delay = Math.pow(2, attempt) * 100;\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.fetchWithRetry(url, config, attempt + 1);\n        }\n      }\n\n      return response;\n\n    } catch (error) {\n      if (error instanceof DOMException && error.name === 'AbortError') {\n        throw new Error(`Request timeout after ${config.timeout || this.defaultTimeout}ms`);\n      }\n\n      if (attempt < this.maxRetries && this.isRetryableError(0, config.method)) {\n        const delay = Math.pow(2, attempt) * 100;\n        await new Promise(resolve => setTimeout(resolve, delay));\n        return this.fetchWithRetry(url, config, attempt + 1);\n      }\n\n      throw error;\n    }\n  }\n\n  public async request<TResponse = any>(\n    config: Partial<RequestConfig> & { url: string; },\n    options: Partial<RequestConfig> = {},\n  ): Promise<TResponse> {\n    try {\n      const mergedConfig: RequestConfig = {\n        method: 'GET',\n        timeout: this.defaultTimeout,\n        ...config,\n        ...options,\n        headers: {\n          ...this.defaultHeaders,\n          ...(config.headers || {}),\n          ...(options.headers || {})\n        }\n      };\n\n      const url = new URL(\n        mergedConfig.url.startsWith('http')\n          ? mergedConfig.url\n          : `${this.baseURL}${mergedConfig.url.startsWith('/') ? '' : '/'}${mergedConfig.url}`\n      ).toString();\n\n      const interceptedConfig = await this.applyRequestInterceptors({\n        ...mergedConfig,\n        url\n      });\n\n      let response = await this.fetchWithRetry(url, interceptedConfig);\n\n      response = await this.applyResponseSuccessInterceptors(response);\n\n      if (response.headers.get('content-type')?.includes('application/json')) {\n        return await response.json() as TResponse;\n      } else {\n        return await response.text() as unknown as TResponse;\n      }\n\n    } catch (error) {\n      const apiError = error instanceof ApiRequestError\n        ? error\n        : new ApiRequestError(error, {\n          ...config,\n          ...options,\n          url: config.url\n        });\n\n      return this.applyResponseErrorInterceptors(apiError);\n    }\n  }\n}"],"names":["_HttpClient","__publicField","config","httpConfig","instanceName","_a","_b","instance","name","options","baseUrl","prefix","error","errorDetails","interceptedConfig","interceptor","response","interceptedResponse","interceptedError","e","status","method","url","attempt","timeout","params","data","fetchOptions","fullUrl","queryParams","key","value","controller","timeoutId","body","delay","resolve","mergedConfig","apiError","ApiRequestError","HttpClient"],"mappings":"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"}