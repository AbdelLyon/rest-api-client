{"version":3,"file":"index.es.js","sources":["../src/services/ApiRequestError.ts","../src/services/HttpClient.ts","../src/services/BaseBuilder.ts","../src/services/EntityBuilder.ts","../src/services/Builder.ts","../src/services/Mutation.ts","../src/services/Query.ts","../src/services/Auth.ts"],"sourcesContent":["import type { ApiErrorSource, RequestConfig } from \"@/types/common\";\n\n\nexport class ApiRequestError extends Error {\n  status?: number;\n  statusText?: string;\n  data?: unknown;\n  originalError: unknown;\n  requestConfig: RequestConfig;\n\n  constructor (error: unknown, requestConfig: RequestConfig) {\n    const message = error instanceof Error\n      ? error.message\n      : \"API Service Request Failed\";\n\n    super(message);\n    this.name = \"ApiRequestError\";\n    this.originalError = error;\n    this.requestConfig = requestConfig;\n\n    if (error && typeof error === \"object\") {\n      const errorObj = error as ApiErrorSource;\n\n      if (\"status\" in errorObj) {\n        this.status = errorObj.status;\n      }\n      if (\"statusText\" in errorObj) {\n        this.statusText = errorObj.statusText as string;\n      }\n      if (\"data\" in errorObj) {\n        this.data = errorObj.data;\n      }\n      // Si c'est une erreur de fetch (Response)\n      if (\"response\" in errorObj && errorObj.response instanceof Response) {\n        const response = errorObj.response;\n        this.status = response.status;\n        this.statusText = response.statusText;\n      }\n    }\n\n    // Capturer la stack trace\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ApiRequestError);\n    }\n  }\n\n  // Méthodes utilitaires pour vérifier le type d'erreur\n  isNotFound(): boolean {\n    return this.status === 404;\n  }\n\n  isUnauthorized(): boolean {\n    return this.status === 401;\n  }\n\n  isForbidden(): boolean {\n    return this.status === 403;\n  }\n\n  isServerError(): boolean {\n    return this.status !== undefined && this.status >= 500 && this.status < 600;\n  }\n\n  isNetworkError(): boolean {\n    return this.status === undefined || this.status === 0;\n  }\n}","import type { IHttpClient } from \"@/interfaces\";\nimport type { HttpConfig, HttpConfigOptions, RequestConfig, RequestInterceptor, ResponseErrorInterceptor, ResponseSuccessInterceptor } from \"@/types/common\";\nimport { ApiRequestError } from \"./ApiRequestError\";\n\nexport class HttpClient implements IHttpClient {\n  private static instances: Map<string, HttpClient> = new Map();\n  private static defaultInstanceName: string;\n\n  private static requestInterceptors: RequestInterceptor[] = [];\n  private static responseSuccessInterceptors: ResponseSuccessInterceptor[] = [];\n  private static responseErrorInterceptors: ResponseErrorInterceptor[] = [];\n\n  private baseURL: string;\n  private defaultTimeout: number;\n  private defaultHeaders: Record<string, string>;\n  private withCredentials: boolean;\n  private maxRetries: number;\n\n  private constructor () {\n    this.baseURL = \"\";\n    this.defaultTimeout = 10000;\n    this.defaultHeaders = {};\n    this.withCredentials = true;\n    this.maxRetries = 3;\n  }\n\n\n  static init(config: {\n    httpConfig: HttpConfig;\n    instanceName: string;\n  }): HttpClient {\n    const { httpConfig, instanceName } = config;\n\n    HttpClient.requestInterceptors = [\n      ...HttpClient.requestInterceptors,\n      ...(httpConfig.interceptors?.request ?? [])\n    ];\n\n    if (httpConfig.interceptors?.response) {\n      HttpClient.responseSuccessInterceptors = [\n        ...HttpClient.responseSuccessInterceptors,\n        ...(httpConfig.interceptors.response.success ?? [])\n      ];\n\n      HttpClient.responseErrorInterceptors = [\n        ...HttpClient.responseErrorInterceptors,\n        ...(httpConfig.interceptors.response.error ?? [])\n      ];\n    }\n\n    if (!this.instances.has(instanceName)) {\n      const instance = new HttpClient();\n      instance.configure(httpConfig);\n      this.instances.set(instanceName, instance);\n\n      if (this.instances.size === 1) {\n        this.defaultInstanceName = instanceName;\n      }\n    }\n    return this.instances.get(instanceName)!;\n  }\n\n  static getInstance(instanceName?: string): HttpClient {\n    const name = instanceName || this.defaultInstanceName;\n\n    if (!this.instances.has(name)) {\n      throw new Error(\n        `Http instance '${name}' not initialized. Call Http.init() first.`,\n      );\n    }\n    return this.instances.get(name)!;\n  }\n\n\n  static setDefaultInstance(instanceName: string): void {\n    if (!this.instances.has(instanceName)) {\n      throw new Error(\n        `Cannot set default: Http instance '${instanceName}' not initialized.`,\n      );\n    }\n    this.defaultInstanceName = instanceName;\n  }\n\n  static getAvailableInstances(): string[] {\n    return Array.from(this.instances.keys());\n  }\n\n  static resetInstance(instanceName?: string): void {\n    if (instanceName) {\n      this.instances.delete(instanceName);\n\n      if (\n        instanceName === this.defaultInstanceName &&\n        this.instances.size > 0\n      ) {\n        this.defaultInstanceName =\n          this.instances.keys().next().value ?? \"default\";\n      }\n    } else {\n      this.instances.clear();\n      this.defaultInstanceName = \"default\";\n    }\n  }\n\n  private configure(options: HttpConfigOptions): void {\n\n    this.baseURL = this.getFullBaseUrl(options);\n    this.defaultTimeout = options.timeout ?? 10000;\n    this.maxRetries = options.maxRetries ?? 3;\n    this.withCredentials = options.withCredentials ?? true;\n\n    this.defaultHeaders = {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      ...options.headers,\n    };\n\n    this.setupDefaultInterceptors();\n  }\n\n  private getFullBaseUrl(options: HttpConfigOptions): string {\n    if (!options.baseURL) {\n      throw new Error(\"baseURL is required in HttpConfigOptions\");\n    }\n\n    let baseUrl = options.baseURL.trim();\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.slice(0, -1);\n    }\n\n    if (options.apiPrefix) {\n      let prefix = options.apiPrefix.trim();\n      if (!prefix.startsWith(\"/\")) {\n        prefix = \"/\" + prefix;\n      }\n      if (prefix.endsWith(\"/\")) {\n        prefix = prefix.slice(0, -1);\n      }\n\n      return baseUrl + prefix;\n    }\n\n    if (options.apiVersion) {\n      return `${baseUrl}/v${options.apiVersion}`;\n    }\n\n    return baseUrl;\n  }\n\n  private setupDefaultInterceptors(): void {\n\n    if (HttpClient.responseErrorInterceptors.length === 0) {\n      HttpClient.responseErrorInterceptors.push((error) => {\n        this.logError(error);\n        return Promise.reject(error);\n      });\n    }\n  }\n\n  private logError(error: any): void {\n    const errorDetails = {\n      url: error.config?.url,\n      method: error.config?.method,\n      status: error.status,\n      data: error.data,\n      message: error.message,\n    };\n\n    console.error(\"API Request Error\", errorDetails);\n  }\n\n  private async applyRequestInterceptors(config: RequestConfig): Promise<RequestConfig> {\n    let interceptedConfig = { ...config };\n\n    for (const interceptor of HttpClient.requestInterceptors) {\n      interceptedConfig = await Promise.resolve(interceptor(interceptedConfig));\n    }\n\n    return interceptedConfig;\n  }\n\n  private async applyResponseSuccessInterceptors(response: Response): Promise<Response> {\n    let interceptedResponse = response;\n\n    for (const interceptor of HttpClient.responseSuccessInterceptors) {\n      interceptedResponse = await Promise.resolve(interceptor(interceptedResponse.clone()));\n    }\n\n    return interceptedResponse;\n  }\n\n  private async applyResponseErrorInterceptors(error: any): Promise<any> {\n    let interceptedError = error;\n\n    for (const interceptor of HttpClient.responseErrorInterceptors) {\n      try {\n        interceptedError = await Promise.resolve(interceptor(interceptedError));\n\n        if (!(interceptedError instanceof Error)) {\n          return interceptedError;\n        }\n      } catch (e) {\n        interceptedError = e;\n      }\n    }\n\n    return Promise.reject(interceptedError);\n  }\n\n  private isRetryableError(status: number, method?: string): boolean {\n    const idempotentMethods = ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE'];\n    const isIdempotent = !method || idempotentMethods.includes(method.toUpperCase());\n\n    return (\n      isIdempotent && (\n        status === 0 ||\n        status === 429 ||\n        (status >= 500 && status < 600)\n      )\n    );\n  }\n\n  private async fetchWithRetry(\n    url: string,\n    config: RequestConfig,\n    attempt: number = 1\n  ): Promise<Response> {\n    try {\n      const { timeout = this.defaultTimeout, params, data, ...fetchOptions } = config;\n      let fullUrl = url;\n\n      if (params && Object.keys(params).length > 0) {\n        const queryParams = new URLSearchParams();\n        for (const [key, value] of Object.entries(params)) {\n          queryParams.append(key, value);\n        }\n        fullUrl += `?${queryParams.toString()}`;\n      }\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort('Request timeout'), timeout);\n\n      let body: any = undefined;\n      if (data !== undefined) {\n        body = typeof data === 'string' ? data : JSON.stringify(data);\n      }\n\n      const response = await fetch(fullUrl, {\n        ...fetchOptions,\n        body,\n        signal: controller.signal,\n        credentials: this.withCredentials ? 'include' : 'same-origin',\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        if (\n          attempt < this.maxRetries &&\n          this.isRetryableError(response.status, config.method)\n        ) {\n          const delay = Math.pow(2, attempt) * 100;\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.fetchWithRetry(url, config, attempt + 1);\n        }\n      }\n\n      return response;\n\n    } catch (error) {\n      if (error instanceof DOMException && error.name === 'AbortError') {\n        throw new Error(`Request timeout after ${config.timeout || this.defaultTimeout}ms`);\n      }\n\n      if (attempt < this.maxRetries && this.isRetryableError(0, config.method)) {\n        const delay = Math.pow(2, attempt) * 100;\n        await new Promise(resolve => setTimeout(resolve, delay));\n        return this.fetchWithRetry(url, config, attempt + 1);\n      }\n\n      throw error;\n    }\n  }\n\n  public async request<TResponse = any>(\n    config: Partial<RequestConfig> & { url: string; },\n    options: Partial<RequestConfig> = {},\n  ): Promise<TResponse> {\n    try {\n      const mergedConfig: RequestConfig = {\n        method: 'GET',\n        timeout: this.defaultTimeout,\n        ...config,\n        ...options,\n        headers: {\n          ...this.defaultHeaders,\n          ...(config.headers || {}),\n          ...(options.headers || {})\n        }\n      };\n\n      const url = new URL(\n        mergedConfig.url.startsWith('http')\n          ? mergedConfig.url\n          : `${this.baseURL}${mergedConfig.url.startsWith('/') ? '' : '/'}${mergedConfig.url}`\n      ).toString();\n\n      const interceptedConfig = await this.applyRequestInterceptors({\n        ...mergedConfig,\n        url\n      });\n\n      let response = await this.fetchWithRetry(url, interceptedConfig);\n\n      response = await this.applyResponseSuccessInterceptors(response);\n\n      if (response.headers.get('content-type')?.includes('application/json')) {\n        return await response.json() as TResponse;\n      } else {\n        return await response.text() as unknown as TResponse;\n      }\n\n    } catch (error) {\n      const apiError = error instanceof ApiRequestError\n        ? error\n        : new ApiRequestError(error, {\n          ...config,\n          ...options,\n          url: config.url\n        });\n\n      return this.applyResponseErrorInterceptors(apiError);\n    }\n  }\n}","\nimport {\n   SyncRelationDefinition,\n   ToggleRelationDefinition,\n   IRelationBuilder,\n   DetachRelationOperation,\n   AttachRelationOperation,\n   NestedRelationOperation,\n   CreateRelationOperation,\n   UpdateRelationOperation\n} from \"@/types/mutate\";\n\n\nexport class BaseBuilder implements IRelationBuilder {\n\n   public createRelation<T extends Record<string, unknown>, RelationKeys extends keyof T = never>(\n      attributes: T,\n      relations?: Record<RelationKeys, NestedRelationOperation<unknown>>\n   ): T & CreateRelationOperation<T> & {\n      relations?: Record<RelationKeys, NestedRelationOperation<unknown>>;\n   } {\n      const normalAttributes: Record<string, unknown> = {};\n      const nestedRelations: Record<string, unknown> = {};\n\n      // Extraire les relations des attributs - style plus simple comme dans createEntity\n      for (const [key, value] of Object.entries(attributes)) {\n         if (value && typeof value === 'object' && 'operation' in value) {\n            nestedRelations[key] = value;\n         } else {\n            normalAttributes[key] = value;\n         }\n      }\n\n      // Ajouter les relations explicites si fournies\n      if (relations) {\n         for (const [key, value] of Object.entries(relations)) {\n            nestedRelations[key] = value;\n         }\n      }\n\n      // Créer la définition de relation\n      const relationDefinition = {\n         operation: \"create\" as const,\n         attributes: normalAttributes as T,\n         ...(Object.keys(nestedRelations).length > 0 ? { relations: nestedRelations } : {})\n      } as T & CreateRelationOperation<T> & {\n         relations?: Record<RelationKeys, NestedRelationOperation<unknown>>;\n      };\n\n      // Définir __relationDefinition comme propriété non-énumérable\n      Object.defineProperty(relationDefinition, '__relationDefinition', {\n         value: true,\n         enumerable: false\n      });\n\n      // Ajouter les getters pour les propriétés normales\n      for (const key of Object.keys(normalAttributes)) {\n         Object.defineProperty(relationDefinition, key, {\n            get() {\n               return normalAttributes[key];\n            },\n            enumerable: true\n         });\n      }\n\n      return relationDefinition;\n   }\n\n   public updateRelation<T extends Record<string, unknown>, RelationKeys extends keyof T = never>(\n      key: string | number,\n      attributes: T,\n      relations?: Record<RelationKeys, NestedRelationOperation<unknown>>\n   ): T & UpdateRelationOperation<T> & {\n      relations?: Record<RelationKeys, NestedRelationOperation<unknown>>;\n   } {\n      const normalAttributes: Record<string, unknown> = {};\n      const nestedRelations: Record<string, unknown> = {};\n\n      // Extraire les relations des attributs - style plus simple comme dans createEntity\n      for (const [attrKey, value] of Object.entries(attributes)) {\n         if (value && typeof value === 'object' && 'operation' in value) {\n            nestedRelations[attrKey] = value;\n         } else {\n            normalAttributes[attrKey] = value;\n         }\n      }\n\n      // Ajouter les relations explicites si fournies\n      if (relations) {\n         for (const [key, value] of Object.entries(relations)) {\n            nestedRelations[key] = value;\n         }\n      }\n\n      // Créer la définition de relation\n      const relationDefinition = {\n         operation: \"update\" as const,\n         key,\n         attributes: normalAttributes as T,\n         ...(Object.keys(nestedRelations).length > 0 ? { relations: nestedRelations } : {})\n      } as T & UpdateRelationOperation<T> & {\n         relations?: Record<RelationKeys, NestedRelationOperation<unknown>>;\n      };\n\n      // Définir __relationDefinition comme propriété non-énumérable\n      Object.defineProperty(relationDefinition, '__relationDefinition', {\n         value: true,\n         enumerable: false\n      });\n\n      // Ajouter les getters pour les propriétés normales\n      for (const key of Object.keys(normalAttributes)) {\n         Object.defineProperty(relationDefinition, key, {\n            get() {\n               return normalAttributes[key];\n            },\n            enumerable: true\n         });\n      }\n\n      return relationDefinition;\n   }\n\n   // Les autres méthodes restent inchangées\n   public attach(key: string | number): AttachRelationOperation {\n      const result = {\n         operation: \"attach\" as const,\n         key\n      };\n\n      // Définir __relationDefinition comme propriété non-énumérable\n      Object.defineProperty(result, '__relationDefinition', {\n         value: true,\n         enumerable: false,\n         writable: false,\n         configurable: true\n      });\n\n      return result;\n   }\n\n   public detach(key: string | number): DetachRelationOperation {\n      const result = {\n         operation: \"detach\" as const,\n         key\n      };\n\n      // Définir __relationDefinition comme propriété non-énumérable\n      Object.defineProperty(result, '__relationDefinition', {\n         value: true,\n         enumerable: false,\n         writable: false,\n         configurable: true\n      });\n\n      return result;\n   }\n\n\n   public sync<T>(\n      key: string | number | Array<string | number>,\n      attributes?: T,\n      pivot?: Record<string, string | number>,\n      withoutDetaching?: boolean\n   ): SyncRelationDefinition<T> {\n      return {\n         operation: \"sync\",\n         key,\n         without_detaching: withoutDetaching,\n         ...(attributes && { attributes }),\n         ...(pivot && { pivot })\n      };\n   }\n\n   public toggle<T>(\n      key: string | number | Array<string | number>,\n      attributes?: T,\n      pivot?: Record<string, string | number>\n   ): ToggleRelationDefinition<T> {\n      return {\n         operation: \"toggle\",\n         key,\n         ...(attributes && { attributes }),\n         ...(pivot && { pivot })\n      };\n   }\n}\n\n\n\n","import { MutationResponse, RequestConfig } from \"@/types\";\nimport { BaseBuilder } from \"./BaseBuilder\";\nimport { BuildOnly, ExtractModelAttributes, IEntityBuilder, IRelationBuilder, MutationFunction, MutationRequest, NestedRelationOperation, TypedMutationOperation } from \"@/types/mutate\";\n\n\nexport class EntityBuilder<TModel> extends BaseBuilder implements IEntityBuilder<TModel>, BuildOnly<TModel> {\n   private operations: Array<TypedMutationOperation<TModel, any>> = [];\n   private mutationFn: MutationFunction | null = null;\n   private relationBuilder: IRelationBuilder;\n\n   constructor (relationBuilder: IRelationBuilder) {\n      super();\n      this.relationBuilder = relationBuilder;\n   }\n\n   public setMutationFunction(fn: MutationFunction): void {\n      this.mutationFn = fn;\n   }\n\n   public createEntity<T extends Record<string, unknown>, RelationKeys extends keyof T = never>(\n      attributes: T\n   ): BuildOnly<TModel, Pick<T, Extract<RelationKeys, string>>> {\n      const normalAttributes: Record<string, unknown> = {};\n      const relations: Record<string, unknown> = {};\n\n      for (const [key, value] of Object.entries(attributes)) {\n         if (value && typeof value === 'object' && 'operation' in value) {\n            relations[key] = value;\n         } else {\n            normalAttributes[key] = value;\n         }\n      }\n\n      const operation: TypedMutationOperation<TModel, typeof relations> = {\n         operation: \"create\",\n         attributes: normalAttributes as ExtractModelAttributes<TModel>,\n         relations\n      };\n\n      this.operations.push(operation);\n      return this as unknown as BuildOnly<TModel, Pick<T, Extract<RelationKeys, string>>>;\n   }\n\n   public updateEntity<T extends Record<string, unknown>>(\n      key: string | number,\n      attributes: T\n   ): IEntityBuilder<TModel> {\n      const normalAttributes: Record<string, unknown> = {};\n      const relations: Record<string, unknown> = {};\n\n      for (const [attrKey, value] of Object.entries(attributes)) {\n         if (value && typeof value === 'object' && 'operation' in value) {\n            relations[attrKey] = value;\n         } else {\n            normalAttributes[attrKey] = value;\n         }\n      }\n\n      const operation: TypedMutationOperation<TModel, typeof relations> = {\n         operation: \"update\",\n         key,\n         attributes: normalAttributes as ExtractModelAttributes<TModel>,\n         relations\n      };\n\n      this.operations.push(operation);\n      return this;\n   }\n\n   public build(): MutationRequest<TModel, any> {\n      const result = [...this.operations];\n      this.operations = []; // Réinitialiser le builder pour une utilisation future\n      return { mutate: result };\n   }\n\n   public async mutate(options?: Partial<RequestConfig>): Promise<MutationResponse> {\n      if (!this.mutationFn) {\n         throw new Error(\"Mutation function not provided to builder\");\n      }\n\n      const data = this.build();\n      return this.mutationFn(data, options);\n   }\n\n   public override createRelation<T extends Record<string, unknown>, RelationKeys extends keyof T = never>(\n      attributes: T,\n      relations?: Record<RelationKeys, NestedRelationOperation<unknown>>\n   ) {\n      return this.relationBuilder.createRelation<T, RelationKeys>(attributes, relations);\n   }\n   public override updateRelation<T extends Record<string, unknown>, RelationKeys extends keyof T = never>(\n      key: string | number,\n      attributes: T,\n      relations?: Record<RelationKeys, NestedRelationOperation<unknown>>\n   ) {\n      return this.relationBuilder.updateRelation<T, RelationKeys>(key, attributes, relations);\n   }\n   public override attach(key: string | number) {\n      return this.relationBuilder.attach(key);\n   }\n\n   public override detach(key: string | number) {\n      return this.relationBuilder.detach(key);\n   }\n\n   public override sync<T>(\n      key: string | number | Array<string | number>,\n      attributes?: T,\n      pivot?: Record<string, string | number>,\n      withoutDetaching?: boolean\n   ) {\n      return this.relationBuilder.sync<T>(key, attributes, pivot, withoutDetaching);\n   }\n\n   public override toggle<T>(\n      key: string | number | Array<string | number>,\n      attributes?: T,\n      pivot?: Record<string, string | number>\n   ) {\n      return this.relationBuilder.toggle<T>(key, attributes, pivot);\n   }\n}","import { IEntityBuilder, IRelationBuilder } from \"@/types/mutate\";\nimport { EntityBuilder } from \"./EntityBuilder\";\nimport { BaseBuilder } from \"./BaseBuilder\";\n\nexport class Builder {\n   private static relationInstance: IRelationBuilder;\n\n   public static getRelationBuilder(): IRelationBuilder {\n      if (!Builder.relationInstance) {\n         Builder.relationInstance = new BaseBuilder();\n      }\n      return Builder.relationInstance;\n   }\n\n   public static createEntityBuilder<T>(relationBuilder?: IRelationBuilder): IEntityBuilder<T> {\n      return new EntityBuilder<T>(relationBuilder || Builder.getRelationBuilder());\n   }\n}","// Mutation.ts\nimport { z } from \"zod\";\nimport { HttpClient } from \"./HttpClient\";\nimport type { DeleteRequest, DeleteResponse } from \"@/types/delete\";\nimport type { ActionRequest, ActionResponse } from \"@/types/action\";\nimport type { BuildOnly, IEntityBuilder, IRelationBuilder, MutationResponse } from \"@/types/mutate\";\nimport type { IMutation } from \"@/interfaces\";\nimport type { RequestConfig } from \"@/types/common\";\nimport { Builder } from \"./Builder\";\n\n\nexport abstract class Mutation<T> implements IMutation<T> {\n  protected http: HttpClient;\n  protected pathname: string;\n  protected schema: z.ZodType<T>;\n\n  private readonly relation: IRelationBuilder;\n\n  constructor (pathname: string, schema: z.ZodType<T>) {\n    this.http = HttpClient.getInstance();\n    this.pathname = pathname;\n    this.schema = schema;\n\n    this.relation = Builder.getRelationBuilder();\n  }\n\n  public entityBuilder(): IEntityBuilder<T> {\n    const builder = Builder.createEntityBuilder<T>(this.relation);\n    builder.setMutationFunction((data, options) => this.mutate(data, options));\n    return builder;\n  }\n\n  public relationBuilder(): IRelationBuilder {\n    return this.relation;\n  }\n\n\n  private validateData(data: unknown[]): T[] {\n    return data.map((item) => {\n      const result = this.schema.safeParse(item);\n      if (!result.success) {\n        console.error(\"Type validation failed:\", result.error.errors);\n        throw new Error(\n          `Type validation failed: ${JSON.stringify(result.error.errors)}`,\n        );\n      }\n      return result.data;\n    });\n  }\n\n  public async mutate(\n    mutateRequest: BuildOnly<T> | { mutate: Array<any>; },\n    options?: Partial<RequestConfig>\n  ): Promise<MutationResponse> {\n\n    const data = 'build' in mutateRequest ? mutateRequest.build() : mutateRequest;\n\n    const response = await this.http.request<MutationResponse>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/mutate`,\n        data,\n      },\n      options,\n    );\n\n    return response;\n  }\n\n  public executeAction(\n    actionRequest: ActionRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<ActionResponse> {\n    return this.http.request<ActionResponse>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/actions/${actionRequest.action}`,\n        data: actionRequest.payload,\n      },\n      options,\n    );\n  }\n\n  public async delete(\n    request: DeleteRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"DELETE\",\n        url: this.pathname,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public async forceDelete(\n    request: DeleteRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"DELETE\",\n        url: `${this.pathname}/force`,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public async restore(\n    request: DeleteRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/restore`,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n}","import { z } from \"zod\";\nimport { HttpClient } from \"./HttpClient\";\nimport type { DetailsResponse, SearchRequest, SearchResponse } from \"@/types\";\nimport type { IQuery } from \"@/interfaces\";\nimport type { PaginatedSearchRequest } from \"@/types/search\";\nimport type { RequestConfig } from \"@/types/common\";\n\nexport abstract class Query<T> implements IQuery<T> {\n  protected http: HttpClient;\n  protected pathname: string;\n  protected schema: z.ZodType<T>;\n\n  constructor (pathname: string, schema: z.ZodType<T>) {\n    this.http = HttpClient.getInstance();\n    this.pathname = pathname;\n    this.schema = schema;\n  }\n\n  private validateData(data: unknown[]): T[] {\n    return data.map((item) => {\n      const result = this.schema.safeParse(item);\n      if (!result.success) {\n        console.error(\"Type validation failed:\", result.error.errors);\n        throw new Error(\n          `Type validation failed: ${JSON.stringify(result.error.errors)}`,\n        );\n      }\n      return result.data;\n    });\n  }\n\n  private searchRequest(\n    search: SearchRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<SearchResponse<T>> {\n    return this.http.request<SearchResponse<T>>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/search`,\n        data: { search },\n      },\n      options,\n    );\n  }\n\n  public async search(\n    search: SearchRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<Array<T>> {\n    const response = await this.searchRequest(search, options);\n    return this.validateData(response.data);\n  }\n\n  public async searchPaginate(\n    search: PaginatedSearchRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<SearchResponse<T>> {\n    const response = await this.searchRequest(search, options);\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public getdetails(\n    options: Partial<RequestConfig> = {},\n  ): Promise<DetailsResponse> {\n    return this.http.request<DetailsResponse>(\n      {\n        method: \"GET\",\n        url: this.pathname,\n      },\n      options,\n    );\n  }\n}\n","import { z } from \"zod\";\nimport { HttpClient } from \"./HttpClient\";\nimport type { RequestConfig } from \"@/types/common\";\nimport type { IAuth } from \"@/interfaces/IAuth\";\n\n\nexport abstract class Auth<\n   UserType extends object = {},\n   CredentialsType extends object = {},\n   RegisterDataType extends object = {},\n   TokenType extends object = {}\n> implements IAuth<UserType, CredentialsType, RegisterDataType, TokenType> {\n   protected http: HttpClient;\n   protected pathname: string;\n   protected userSchema: z.ZodType<UserType>;\n   protected credentialsSchema?: z.ZodType<CredentialsType>;\n   protected registerDataSchema?: z.ZodType<RegisterDataType>;\n   protected tokenSchema?: z.ZodType<TokenType>;\n\n   constructor (\n      pathname: string,\n      schemas: {\n         user: z.ZodType<UserType>;\n         credentials?: z.ZodType<CredentialsType>;\n         registerData?: z.ZodType<RegisterDataType>;\n         tokens?: z.ZodType<TokenType>;\n      }\n   ) {\n      this.http = HttpClient.getInstance();\n      this.pathname = pathname;\n      this.userSchema = schemas.user;\n      this.credentialsSchema = schemas.credentials;\n      this.registerDataSchema = schemas.registerData;\n      this.tokenSchema = schemas.tokens;\n   }\n\n   /**\n    * Inscription\n    */\n   public async register(\n      userData: RegisterDataType,\n      options: Partial<RequestConfig> = {}\n   ): Promise<UserType> {\n      // Validation des données d'inscription si un schéma est défini\n      if (this.registerDataSchema) {\n         this.registerDataSchema.parse(userData);\n      }\n\n      try {\n         const response = await this.http.request<{\n            user: UserType;\n            tokens: TokenType;\n         }>({\n            method: 'POST',\n            url: `${this.pathname}/register`,\n            data: userData\n         }, options);\n\n         // Validation du schéma de réponse\n         const user = this.userSchema.parse(response.user);\n         if (this.tokenSchema) {\n            this.tokenSchema.parse(response.tokens);\n         }\n\n         return user;\n      } catch (error) {\n         console.error('Registration error', error);\n         throw error;\n      }\n   }\n\n   /**\n    * Connexion\n    */\n   public async login(\n      credentials: CredentialsType,\n      options: Partial<RequestConfig> = {}\n   ): Promise<{\n      user: UserType;\n      tokens: TokenType;\n   }> {\n      // Validation des credentials si un schéma est défini\n      if (this.credentialsSchema) {\n         this.credentialsSchema.parse(credentials);\n      }\n\n      try {\n         const response = await this.http.request<{\n            user: UserType;\n            tokens: TokenType;\n         }>({\n            method: 'POST',\n            url: `${this.pathname}/login`,\n            data: credentials\n         }, options);\n\n         // Validation des schémas\n         const user = this.userSchema.parse(response.user);\n         const tokens = this.tokenSchema ? this.tokenSchema.parse(response.tokens) : response.tokens;\n\n         return { user, tokens };\n      } catch (error) {\n         console.error('Login error', error);\n         throw error;\n      }\n   }\n\n   /**\n    * Déconnexion\n    */\n   public async logout(\n      options: Partial<RequestConfig> = {}\n   ): Promise<void> {\n      try {\n         await this.http.request({\n            method: 'POST',\n            url: `${this.pathname}/logout`\n         }, options);\n      } catch (error) {\n         console.error('Logout error', error);\n         throw error;\n      }\n   }\n\n   /**\n    * Rafraîchissement du token\n    */\n   public async refreshToken(\n      refreshToken: string,\n      options: Partial<RequestConfig> = {}\n   ): Promise<TokenType> {\n      try {\n         const response = await this.http.request<TokenType>({\n            method: 'POST',\n            url: `${this.pathname}/refresh-token`,\n            data: { refreshToken }\n         }, options);\n\n         // Validation du schéma des tokens si défini\n         return this.tokenSchema ? this.tokenSchema.parse(response) : response;\n      } catch (error) {\n         console.error('Token refresh error', error);\n         throw error;\n      }\n   }\n\n   /**\n    * Récupération de l'utilisateur courant\n    */\n   public async getCurrentUser(\n      options: Partial<RequestConfig> = {}\n   ): Promise<UserType> {\n      try {\n         const response = await this.http.request<UserType>({\n            method: 'GET',\n            url: `${this.pathname}/me`\n         }, options);\n\n         // Validation du schéma de l'utilisateur\n         return this.userSchema.parse(response);\n      } catch (error) {\n         console.error('Get current user error', error);\n         throw error;\n      }\n   }\n};"],"names":["ApiRequestError","error","requestConfig","message","__publicField","errorObj","response","_HttpClient","config","_a","_b","httpConfig","instanceName","instance","name","options","baseUrl","prefix","errorDetails","interceptedConfig","interceptor","interceptedResponse","interceptedError","e","status","method","url","attempt","timeout","params","data","fetchOptions","fullUrl","queryParams","key","value","controller","timeoutId","body","delay","resolve","mergedConfig","apiError","HttpClient","BaseBuilder","attributes","relations","normalAttributes","nestedRelations","relationDefinition","attrKey","result","pivot","withoutDetaching","EntityBuilder","relationBuilder","fn","operation","_Builder","Builder","Mutation","pathname","schema","builder","item","mutateRequest","actionRequest","request","Query","search","Auth","schemas","userData","user","credentials","tokens","refreshToken"],"mappings":"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"}