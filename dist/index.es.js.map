{"version":3,"file":"index.es.js","sources":["../src/services/ApiRequestError.ts","../src/services/HttpClient.ts","../src/services/Mutation.ts","../src/services/Query.ts"],"sourcesContent":["import { AxiosError, AxiosRequestConfig } from \"axios\";\n\nexport class ApiRequestError extends Error {\n  constructor(\n    public originalError: AxiosError,\n    public requestConfig: AxiosRequestConfig,\n  ) {\n    super(\"API Service Request Failed\");\n    this.name = \"ApiRequestError\";\n  }\n}\n","import axiosRetry from \"axios-retry\";\nimport axios from \"axios\";\nimport type { AxiosError, AxiosInstance, AxiosRequestConfig } from \"axios\";\nimport type { IHttpClient } from \"@/interfaces\";\nimport type { HttpConfigOptions } from \"@/types/common\";\nimport { ApiRequestError } from \"./ApiRequestError\";\n\nexport class HttpClient implements IHttpClient {\n  private static instance?: HttpClient;\n  private axiosInstance!: AxiosInstance;\n  private maxRetries!: number;\n\n  static init(options: HttpConfigOptions): HttpClient {\n    if (!this.instance) {\n      this.instance = new HttpClient();\n      this.instance.maxRetries = options.maxRetries ?? 3;\n      this.instance.axiosInstance = this.instance.createAxiosInstance(options);\n      this.instance.setupInterceptors();\n      this.instance.configureRetry();\n    }\n    return this.instance;\n  }\n\n  static getInstance(): HttpClient {\n    if (!this.instance) {\n      throw new Error(\"Http not initialized. Call Http.init() first.\");\n    }\n    return this.instance;\n  }\n\n  protected getAxiosInstance(): AxiosInstance {\n    return this.axiosInstance;\n  }\n\n  protected setAxiosInstance(instance: AxiosInstance): void {\n    this.axiosInstance = instance;\n  }\n\n  protected getFullBaseUrl(options: HttpConfigOptions): string {\n    // Vérifier si l'URL de base est fournie\n    if (!options.baseURL) {\n      throw new Error(\"baseURL is required in HttpConfigOptions\");\n    }\n\n    // Normaliser l'URL de base (s'assurer qu'elle n'a pas de / à la fin)\n    let baseUrl = options.baseURL.trim();\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.slice(0, -1);\n    }\n\n    // Ajouter un préfixe d'API si nécessaire\n    if (options.apiPrefix) {\n      // S'assurer que le préfixe est correctement formaté\n      let prefix = options.apiPrefix.trim();\n      if (!prefix.startsWith(\"/\")) {\n        prefix = \"/\" + prefix;\n      }\n      if (prefix.endsWith(\"/\")) {\n        prefix = prefix.slice(0, -1);\n      }\n\n      return baseUrl + prefix;\n    }\n\n    // Ajouter un préfixe de version si nécessaire\n    if (options.apiVersion) {\n      return `${baseUrl}/v${options.apiVersion}`;\n    }\n\n    return baseUrl;\n  }\n\n  private createAxiosInstance(options: HttpConfigOptions): AxiosInstance {\n    const axiosConfig: AxiosRequestConfig = {\n      baseURL: this.getFullBaseUrl(options),\n      timeout: options.timeout ?? 10000,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...options.headers,\n      },\n      withCredentials: options.withCredentials ?? true,\n    };\n\n    return axios.create(axiosConfig);\n  }\n\n  private setupInterceptors(): void {\n    this.axiosInstance.interceptors.request.use(\n      (config) => config,\n      (error) => Promise.reject(error),\n    );\n\n    this.axiosInstance.interceptors.response.use(\n      (response) => response,\n      this.handleErrorResponse.bind(this),\n    );\n  }\n\n  private configureRetry(): void {\n    axiosRetry(this.axiosInstance, {\n      retries: this.maxRetries,\n      retryDelay: axiosRetry.exponentialDelay,\n      retryCondition: this.isRetryableError.bind(this),\n    });\n  }\n\n  // Rendons cette méthode non-privée pour faciliter les tests\n  // Vous pouvez aussi la laisser privée et utiliser des techniques d'accès via l'indexation dans les tests\n  protected isRetryableError(error: AxiosError): boolean {\n    return (\n      axiosRetry.isNetworkOrIdempotentRequestError(error) ||\n      error.response?.status === 429\n    );\n  }\n\n  private handleErrorResponse(error: AxiosError): Promise<never> {\n    this.logError(error);\n    return Promise.reject(new ApiRequestError(error, error.config || {}));\n  }\n\n  // Rendons cette méthode non-privée pour faciliter les tests\n  protected logError(error: AxiosError): void {\n    console.error(\"API Request Error\", {\n      url: error.config?.url,\n      method: error.config?.method,\n      status: error.response?.status,\n      data: error.response?.data,\n      message: error.message,\n    });\n  }\n\n  public async request<TResponse>(\n    config: AxiosRequestConfig,\n    options: Partial<AxiosRequestConfig> = {},\n  ): Promise<TResponse> {\n    try {\n      const mergedConfig = {\n        timeout: 10000,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        ...config,\n        ...options,\n      };\n\n      const response = await this.axiosInstance.request<TResponse>(\n        mergedConfig,\n      );\n      return response.data;\n    } catch (error) {\n      if (error instanceof ApiRequestError) {\n        throw error;\n      }\n      throw new ApiRequestError(error as AxiosError, config);\n    }\n  }\n\n  static resetInstance(): void {\n    if (this.instance) {\n      this.instance = undefined;\n    }\n  }\n}\n","import { z } from \"zod\";\nimport { HttpClient } from \"./HttpClient\";\nimport type { AxiosRequestConfig } from \"axios\";\nimport type { DeleteRequest, DeleteResponse } from \"../types/delete\";\nimport type { ActionRequest, ActionResponse } from \"../types/action\";\nimport type { MutationRequest, MutationResponse } from \"../types/mutate\";\nimport type { IMutation } from \"@/interfaces\";\n\nexport abstract class Mutation<T> implements IMutation<T> {\n  protected http: HttpClient;\n  protected pathname: string;\n  protected schema: z.ZodType<T>;\n\n  constructor(pathname: string, schema: z.ZodType<T>) {\n    this.http = HttpClient.getInstance();\n    this.pathname = pathname;\n    this.schema = schema;\n  }\n\n  private validateData(data: unknown[]): T[] {\n    return data.map((item) => {\n      const result = this.schema.safeParse(item);\n      if (!result.success) {\n        console.error(\"Type validation failed:\", result.error.errors);\n        throw new Error(\n          `Type validation failed: ${JSON.stringify(result.error.errors)}`,\n        );\n      }\n      return result.data;\n    });\n  }\n\n  public async mutate<TAttributes, TRelations>(\n    mutateRequest: MutationRequest<TAttributes, TRelations>,\n    options: Partial<AxiosRequestConfig> = {},\n  ): Promise<MutationResponse<T>> {\n    const response = await this.http.request<MutationResponse<T>>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/mutate`,\n        data: mutateRequest,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public executeAction(\n    actionRequest: ActionRequest,\n    options: Partial<AxiosRequestConfig> = {},\n  ): Promise<ActionResponse> {\n    return this.http.request<ActionResponse>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/actions/${actionRequest.action}`,\n        data: actionRequest.payload,\n      },\n      options,\n    );\n  }\n\n  public async delete(\n    request: DeleteRequest,\n    options: Partial<AxiosRequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"DELETE\",\n        url: this.pathname,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public async forceDelete(\n    request: DeleteRequest,\n    options: Partial<AxiosRequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"DELETE\",\n        url: `${this.pathname}/force`,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public async restore(\n    request: DeleteRequest,\n    options: Partial<AxiosRequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/restore`,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n}\n","import { z } from \"zod\";\nimport { HttpClient } from \"./HttpClient\";\nimport type { AxiosRequestConfig } from \"axios\";\nimport type { DetailsResponse, SearchRequest, SearchResponse } from \"../types\";\nimport type { IQuery } from \"@/interfaces\";\nimport { PaginatedSearchRequest } from \"@/types/search\";\n\nexport abstract class Query<T> implements IQuery<T> {\n  protected http: HttpClient;\n  protected pathname: string;\n  protected schema: z.ZodType<T>;\n\n  constructor(pathname: string, schema: z.ZodType<T>) {\n    this.http = HttpClient.getInstance();\n    this.pathname = pathname;\n    this.schema = schema;\n  }\n\n  private validateData(data: unknown[]): T[] {\n    return data.map((item) => {\n      const result = this.schema.safeParse(item);\n      if (!result.success) {\n        console.error(\"Type validation failed:\", result.error.errors);\n        throw new Error(\n          `Type validation failed: ${JSON.stringify(result.error.errors)}`,\n        );\n      }\n      return result.data;\n    });\n  }\n\n  private searchRequest(\n    search: SearchRequest,\n    options: Partial<AxiosRequestConfig> = {},\n  ): Promise<SearchResponse<T>> {\n    return this.http.request<SearchResponse<T>>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/search`,\n        data: { search },\n      },\n      options,\n    );\n  }\n\n  public async search(\n    search: SearchRequest,\n    options: Partial<AxiosRequestConfig> = {},\n  ): Promise<Array<T>> {\n    const response = await this.searchRequest(search, options);\n    return this.validateData(response.data);\n  }\n\n  public async searchPaginate(\n    search: PaginatedSearchRequest,\n    options: Partial<AxiosRequestConfig> = {},\n  ): Promise<SearchResponse<T>> {\n    const response = await this.searchRequest(search, options);\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public getdetails(\n    options: Partial<AxiosRequestConfig> = {},\n  ): Promise<DetailsResponse> {\n    return this.http.request<DetailsResponse>(\n      {\n        method: \"GET\",\n        url: this.pathname,\n      },\n      options,\n    );\n  }\n}\n"],"names":["ApiRequestError","originalError","requestConfig","_HttpClient","__publicField","options","instance","baseUrl","prefix","axiosConfig","axios","config","error","response","axiosRetry","_a","_b","_c","_d","mergedConfig","HttpClient","Mutation","pathname","schema","data","item","result","mutateRequest","actionRequest","request","Query","search"],"mappings":"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"}