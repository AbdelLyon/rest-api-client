{"version":3,"file":"Query.es.js","sources":["../../src/query/Query.ts"],"sourcesContent":["import type { SearchRequest, SearchResponse } from \"@/query/types/search\";\nimport type { DetailsResponse } from \"@/query/types/details\";\nimport type { IQuery } from \"@/query/interface/IQuery\";\nimport type { PaginatedSearchRequest } from \"@/query/types/search\";\nimport type { RequestConfig } from \"@/http/types/http\";\nimport { z } from \"zod\";\nimport { HttpClient } from \"../http/HttpClient\";\n\nexport abstract class Query<T> implements IQuery<T> {\n  protected http: HttpClient;\n  protected pathname: string;\n  protected schema: z.ZodType<T>;\n\n  constructor (pathname: string, schema: z.ZodType<T>) {\n    this.http = HttpClient.getInstance();\n    this.pathname = pathname;\n    this.schema = schema;\n  }\n\n  private validateData(data: unknown[]): T[] {\n    return data.map((item) => {\n      const result = this.schema.safeParse(item);\n      if (!result.success) {\n        console.error(\"Type validation failed:\", result.error.errors);\n        throw new Error(\n          `Type validation failed: ${JSON.stringify(result.error.errors)}`,\n        );\n      }\n      return result.data;\n    });\n  }\n\n  private searchRequest(\n    search: SearchRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<SearchResponse<T>> {\n    return this.http.request<SearchResponse<T>>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/search`,\n        data: { search },\n      },\n      options,\n    );\n  }\n\n  public async search(\n    search: SearchRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<Array<T>> {\n    const response = await this.searchRequest(search, options);\n    return this.validateData(response.data);\n  }\n\n  public async searchPaginate(\n    search: PaginatedSearchRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<SearchResponse<T>> {\n    const response = await this.searchRequest(search, options);\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public getdetails(\n    options: Partial<RequestConfig> = {},\n  ): Promise<DetailsResponse> {\n    return this.http.request<DetailsResponse>(\n      {\n        method: \"GET\",\n        url: this.pathname,\n      },\n      options,\n    );\n  }\n}\n"],"names":["Query","pathname","schema","__publicField","HttpClient","data","item","result","search","options","response"],"mappings":";;;;AAQO,MAAeA,EAA8B;AAAA,EAKlD,YAAaC,GAAkBC,GAAsB;AAJ3C,IAAAC,EAAA;AACA,IAAAA,EAAA;AACA,IAAAA,EAAA;AAGH,SAAA,OAAOC,EAAW,YAAY,GACnC,KAAK,WAAWH,GAChB,KAAK,SAASC;AAAA,EAAA;AAAA,EAGR,aAAaG,GAAsB;AAClC,WAAAA,EAAK,IAAI,CAACC,MAAS;AACxB,YAAMC,IAAS,KAAK,OAAO,UAAUD,CAAI;AACrC,UAAA,CAACC,EAAO;AACV,sBAAQ,MAAM,2BAA2BA,EAAO,MAAM,MAAM,GACtD,IAAI;AAAA,UACR,2BAA2B,KAAK,UAAUA,EAAO,MAAM,MAAM,CAAC;AAAA,QAChE;AAEF,aAAOA,EAAO;AAAA,IAAA,CACf;AAAA,EAAA;AAAA,EAGK,cACNC,GACAC,IAAkC,IACN;AAC5B,WAAO,KAAK,KAAK;AAAA,MACf;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAM,EAAE,QAAAD,EAAO;AAAA,MACjB;AAAA,MACAC;AAAA,IACF;AAAA,EAAA;AAAA,EAGF,MAAa,OACXD,GACAC,IAAkC,IACf;AACnB,UAAMC,IAAW,MAAM,KAAK,cAAcF,GAAQC,CAAO;AAClD,WAAA,KAAK,aAAaC,EAAS,IAAI;AAAA,EAAA;AAAA,EAGxC,MAAa,eACXF,GACAC,IAAkC,IACN;AAC5B,UAAMC,IAAW,MAAM,KAAK,cAAcF,GAAQC,CAAO;AAElD,WAAA;AAAA,MACL,GAAGC;AAAA,MACH,MAAM,KAAK,aAAaA,EAAS,IAAI;AAAA,IACvC;AAAA,EAAA;AAAA,EAGK,WACLD,IAAkC,IACR;AAC1B,WAAO,KAAK,KAAK;AAAA,MACf;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,KAAK;AAAA,MACZ;AAAA,MACAA;AAAA,IACF;AAAA,EAAA;AAEJ;"}