{"version":3,"file":"Auth.js","sources":["../../../src/auth/Auth.ts"],"sourcesContent":["import type { IAuth } from \"./types\";\nimport type { RequestConfig } from \"@/http/types\";\nimport type { z } from \"zod\";\nimport type { Request } from \"@/http/Request/Request\";\nimport { HttpClient } from \"@/http/HttpClient\";\n\nexport abstract class Auth<\n  TUser extends object = {},\n  TCredentials extends object = {},\n  TRegisterData extends object = {},\n  TTokens extends object = {},\n> implements IAuth<TUser, TCredentials, TRegisterData, TTokens>\n{\n  protected http: Request;\n  protected pathname: string;\n  protected userSchema: z.ZodType<TUser>;\n  protected credentialsSchema?: z.ZodType<TCredentials>;\n  protected registerDataSchema?: z.ZodType<TRegisterData>;\n  protected tokenSchema?: z.ZodType<TTokens>;\n\n  protected httpInstanceName?: string;\n\n  constructor(\n    pathname: string,\n    schemas: {\n      user: z.ZodType<TUser>;\n      credentials?: z.ZodType<TCredentials>;\n      registerData?: z.ZodType<TRegisterData>;\n      tokens?: z.ZodType<TTokens>;\n    },\n    httpInstanceName?: string,\n  ) {\n    this.pathname = pathname;\n    this.userSchema = schemas.user;\n    this.credentialsSchema = schemas.credentials;\n    this.registerDataSchema = schemas.registerData;\n    this.tokenSchema = schemas.tokens;\n    this.httpInstanceName = httpInstanceName;\n\n    this.initHttpClient();\n    this.http = HttpClient.getInstance(this.httpInstanceName);\n  }\n\n  private initHttpClient(): void {\n    this.http = HttpClient.getInstance(this.httpInstanceName);\n  }\n\n  public async register(\n    userData: TRegisterData,\n    options: Partial<RequestConfig> = {},\n  ): Promise<TUser> {\n    if (this.registerDataSchema) {\n      this.registerDataSchema.parse(userData);\n    }\n\n    try {\n      const response = await this.http.request<{\n        user: TUser;\n        tokens: TTokens;\n      }>(\n        {\n          method: \"POST\",\n          url: `${this.pathname}/register`,\n          data: userData,\n        },\n        options,\n      );\n\n      const user = this.userSchema.parse(response.user);\n      if (this.tokenSchema) {\n        this.tokenSchema.parse(response.tokens);\n      }\n\n      return user;\n    } catch (error) {\n      console.error(\"Registration error\", error);\n      throw error;\n    }\n  }\n\n  public async login(\n    credentials: TCredentials,\n    options: Partial<RequestConfig> = {},\n  ): Promise<{\n    user: TUser;\n    tokens: TTokens;\n  }> {\n    if (this.credentialsSchema) {\n      this.credentialsSchema.parse(credentials);\n    }\n\n    try {\n      const response = await this.http.request<{\n        user: TUser;\n        tokens: TTokens;\n      }>(\n        {\n          method: \"POST\",\n          url: `${this.pathname}/login`,\n          data: credentials,\n        },\n        options,\n      );\n\n      const user = this.userSchema.parse(response.user);\n      const tokens = this.tokenSchema\n        ? this.tokenSchema.parse(response.tokens)\n        : response.tokens;\n\n      return { user, tokens };\n    } catch (error) {\n      console.error(\"Login error\", error);\n      throw error;\n    }\n  }\n\n  public async logout(options: Partial<RequestConfig> = {}): Promise<void> {\n    try {\n      await this.http.request(\n        {\n          method: \"POST\",\n          url: `${this.pathname}/logout`,\n        },\n        options,\n      );\n    } catch (error) {\n      console.error(\"Logout error\", error);\n      throw error;\n    }\n  }\n\n  public async refreshToken(\n    refreshToken: string,\n    options: Partial<RequestConfig> = {},\n  ): Promise<TTokens> {\n    try {\n      const response = await this.http.request<TTokens>(\n        {\n          method: \"POST\",\n          url: `${this.pathname}/refresh-token`,\n          data: { refreshToken },\n        },\n        options,\n      );\n\n      return this.tokenSchema ? this.tokenSchema.parse(response) : response;\n    } catch (error) {\n      console.error(\"Token refresh error\", error);\n      throw error;\n    }\n  }\n\n  public async getCurrentUser(\n    options: Partial<RequestConfig> = {},\n  ): Promise<TUser> {\n    try {\n      const response = await this.http.request<TUser>(\n        {\n          method: \"GET\",\n          url: `${this.pathname}/me`,\n        },\n        options,\n      );\n\n      return this.userSchema.parse(response);\n    } catch (error) {\n      console.error(\"Get current user error\", error);\n      throw error;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}