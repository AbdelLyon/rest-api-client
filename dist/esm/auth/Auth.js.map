{"version":3,"file":"Auth.js","sources":["../../../src/auth/Auth.ts"],"sourcesContent":["import { HttpClient } from \"../http/HttpClient\";\nimport type { z } from \"zod\";\nimport type { IAuth } from \"./interface/IAuth\";\nimport type { RequestConfig } from \"@/http/types/http\";\n\n\nexport abstract class Auth<\n   TUser extends object = {},\n   TCredentials extends object = {},\n   TRegisterData extends object = {},\n   TTokens extends object = {}\n> implements IAuth<TUser, TCredentials, TRegisterData, TTokens> {\n   protected http: HttpClient;\n   protected pathname: string;\n   protected userSchema: z.ZodType<TUser>;\n   protected credentialsSchema?: z.ZodType<TCredentials>;\n   protected registerDataSchema?: z.ZodType<TRegisterData>;\n   protected tokenSchema?: z.ZodType<TTokens>;\n\n   constructor (\n      pathname: string,\n      schemas: {\n         user: z.ZodType<TUser>;\n         credentials?: z.ZodType<TCredentials>;\n         registerData?: z.ZodType<TRegisterData>;\n         tokens?: z.ZodType<TTokens>;\n      }\n   ) {\n      this.http = HttpClient.getInstance();\n      this.pathname = pathname;\n      this.userSchema = schemas.user;\n      this.credentialsSchema = schemas.credentials;\n      this.registerDataSchema = schemas.registerData;\n      this.tokenSchema = schemas.tokens;\n   }\n\n   public async register(\n      userData: TRegisterData,\n      options: Partial<RequestConfig> = {}\n   ): Promise<TUser> {\n      if (this.registerDataSchema) {\n         this.registerDataSchema.parse(userData);\n      }\n\n      try {\n         const response = await this.http.request<{\n            user: TUser;\n            tokens: TTokens;\n         }>({\n            method: 'POST',\n            url: `${this.pathname}/register`,\n            data: userData\n         }, options);\n\n         const user = this.userSchema.parse(response.user);\n         if (this.tokenSchema) {\n            this.tokenSchema.parse(response.tokens);\n         }\n\n         return user;\n      } catch (error) {\n         console.error('Registration error', error);\n         throw error;\n      }\n   }\n\n   public async login(\n      credentials: TCredentials,\n      options: Partial<RequestConfig> = {}\n   ): Promise<{\n      user: TUser;\n      tokens: TTokens;\n   }> {\n      if (this.credentialsSchema) {\n         this.credentialsSchema.parse(credentials);\n      }\n\n      try {\n         const response = await this.http.request<{\n            user: TUser;\n            tokens: TTokens;\n         }>({\n            method: 'POST',\n            url: `${this.pathname}/login`,\n            data: credentials\n         }, options);\n\n         const user = this.userSchema.parse(response.user);\n         const tokens = this.tokenSchema ? this.tokenSchema.parse(response.tokens) : response.tokens;\n\n         return { user, tokens };\n      } catch (error) {\n         console.error('Login error', error);\n         throw error;\n      }\n   }\n\n   public async logout(\n      options: Partial<RequestConfig> = {}\n   ): Promise<void> {\n      try {\n         await this.http.request({\n            method: 'POST',\n            url: `${this.pathname}/logout`\n         }, options);\n      } catch (error) {\n         console.error('Logout error', error);\n         throw error;\n      }\n   }\n\n   public async refreshToken(\n      refreshToken: string,\n      options: Partial<RequestConfig> = {}\n   ): Promise<TTokens> {\n      try {\n         const response = await this.http.request<TTokens>({\n            method: 'POST',\n            url: `${this.pathname}/refresh-token`,\n            data: { refreshToken }\n         }, options);\n\n         // Validation du schéma des tokens si défini\n         return this.tokenSchema ? this.tokenSchema.parse(response) : response;\n      } catch (error) {\n         console.error('Token refresh error', error);\n         throw error;\n      }\n   }\n\n   public async getCurrentUser(\n      options: Partial<RequestConfig> = {}\n   ): Promise<TUser> {\n      try {\n         const response = await this.http.request<TUser>({\n            method: 'GET',\n            url: `${this.pathname}/me`\n         }, options);\n\n         return this.userSchema.parse(response);\n      } catch (error) {\n         console.error('Get current user error', error);\n         throw error;\n      }\n   }\n};"],"names":[],"mappings":";;;;AAMO,MAAe,KAK0C;AAAA,EAQ7D,YACG,UACA,SAMD;AAfQ;AACA;AACA;AACA;AACA;AACA;AAWF,SAAA,OAAO,WAAW,YAAY;AACnC,SAAK,WAAW;AAChB,SAAK,aAAa,QAAQ;AAC1B,SAAK,oBAAoB,QAAQ;AACjC,SAAK,qBAAqB,QAAQ;AAClC,SAAK,cAAc,QAAQ;AAAA,EAAA;AAAA,EAG9B,MAAa,SACV,UACA,UAAkC,IACnB;AACf,QAAI,KAAK,oBAAoB;AACrB,WAAA,mBAAmB,MAAM,QAAQ;AAAA,IAAA;AAGrC,QAAA;AACD,YAAM,WAAW,MAAM,KAAK,KAAK,QAG9B;AAAA,QACA,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAM;AAAA,SACN,OAAO;AAEV,YAAM,OAAO,KAAK,WAAW,MAAM,SAAS,IAAI;AAChD,UAAI,KAAK,aAAa;AACd,aAAA,YAAY,MAAM,SAAS,MAAM;AAAA,MAAA;AAGlC,aAAA;AAAA,aACD,OAAO;AACL,cAAA,MAAM,sBAAsB,KAAK;AACnC,YAAA;AAAA,IAAA;AAAA,EACT;AAAA,EAGH,MAAa,MACV,aACA,UAAkC,IAIlC;AACA,QAAI,KAAK,mBAAmB;AACpB,WAAA,kBAAkB,MAAM,WAAW;AAAA,IAAA;AAGvC,QAAA;AACD,YAAM,WAAW,MAAM,KAAK,KAAK,QAG9B;AAAA,QACA,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAM;AAAA,SACN,OAAO;AAEV,YAAM,OAAO,KAAK,WAAW,MAAM,SAAS,IAAI;AAC1C,YAAA,SAAS,KAAK,cAAc,KAAK,YAAY,MAAM,SAAS,MAAM,IAAI,SAAS;AAE9E,aAAA,EAAE,MAAM,OAAO;AAAA,aAChB,OAAO;AACL,cAAA,MAAM,eAAe,KAAK;AAC5B,YAAA;AAAA,IAAA;AAAA,EACT;AAAA,EAGH,MAAa,OACV,UAAkC,IACpB;AACV,QAAA;AACK,YAAA,KAAK,KAAK,QAAQ;AAAA,QACrB,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,SACrB,OAAO;AAAA,aACJ,OAAO;AACL,cAAA,MAAM,gBAAgB,KAAK;AAC7B,YAAA;AAAA,IAAA;AAAA,EACT;AAAA,EAGH,MAAa,aACV,cACA,UAAkC,IACjB;AACb,QAAA;AACD,YAAM,WAAW,MAAM,KAAK,KAAK,QAAiB;AAAA,QAC/C,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAM,EAAE,aAAa;AAAA,SACrB,OAAO;AAGV,aAAO,KAAK,cAAc,KAAK,YAAY,MAAM,QAAQ,IAAI;AAAA,aACvD,OAAO;AACL,cAAA,MAAM,uBAAuB,KAAK;AACpC,YAAA;AAAA,IAAA;AAAA,EACT;AAAA,EAGH,MAAa,eACV,UAAkC,IACnB;AACX,QAAA;AACD,YAAM,WAAW,MAAM,KAAK,KAAK,QAAe;AAAA,QAC7C,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,SACrB,OAAO;AAEH,aAAA,KAAK,WAAW,MAAM,QAAQ;AAAA,aAC/B,OAAO;AACL,cAAA,MAAM,0BAA0B,KAAK;AACvC,YAAA;AAAA,IAAA;AAAA,EACT;AAEN;"}