{"version":3,"file":"Mutation.js","sources":["../../../src/mutation/Mutation.ts"],"sourcesContent":["import type { z } from \"zod\";\nimport type { HttpRequest } from \"@/http/Request/HttpRequest\";\nimport { HttpClient } from \"@/http/HttpClient\";\nimport {\n  ActionRequest,\n  ActionResponse,\n  BuilderWithCreationContext,\n  BuilderWithUpdateContext,\n  DeleteRequest,\n  DeleteResponse,\n  IModel,\n  IMutation,\n  IRelation,\n  MutationRequest,\n  MutationResponse,\n} from \"./types\";\nimport { Builder } from \"./builder/Builder\";\nimport { Relation } from \"./builder/Relation\";\n\nexport abstract class Mutation<T> implements IMutation<T> {\n  protected http: HttpRequest;\n  protected pathname: string;\n  protected schema: z.ZodType<T>;\n  private readonly _relation: IRelation;\n\n  constructor (\n    pathname: string,\n    schema: z.ZodType<T>,\n    httpInstanceName?: string,\n  ) {\n    this.http = HttpClient.getInstance(httpInstanceName);\n    this.pathname = pathname;\n    this.schema = schema;\n    this._relation = Relation.getInstance();\n    this._relation.setContext(\"update\");\n  }\n\n  get model(): IModel<T> {\n    const builder = Builder.create<T>();\n    builder.setMutationFunction((data) => this.mutate(data));\n    return builder;\n  }\n\n  get relation(): IRelation {\n    return this._relation;\n  }\n\n  private validateData(data: Array<unknown>): Array<T> {\n    return data.map((item) => {\n      const result = this.schema.safeParse(item);\n      if (!result.success) {\n        console.error(\"Type validation failed:\", result.error.errors);\n        throw new Error(\n          `Type validation failed: ${JSON.stringify(result.error.errors)}`,\n        );\n      }\n      return result.data;\n    });\n  }\n\n  public async mutate(\n    mutateRequest:\n      | BuilderWithCreationContext<T>\n      | BuilderWithUpdateContext<T>\n      | MutationRequest<T, Record<string, unknown>>,\n  ): Promise<MutationResponse> {\n    const data =\n      \"build\" in mutateRequest ? mutateRequest.build() : mutateRequest;\n\n    const response = await this.http.request<MutationResponse>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/mutate`,\n        data,\n      },\n    );\n\n    return response;\n  }\n\n  public action(\n    actionRequest: ActionRequest,\n  ): Promise<ActionResponse> {\n    return this.http.request<ActionResponse>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/actions/${actionRequest.action}`,\n        data: actionRequest.payload,\n      },\n    );\n  }\n\n  public async delete(\n    request: DeleteRequest,\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"DELETE\",\n        url: this.pathname,\n        data: request,\n      },\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public async forceDelete(\n    request: DeleteRequest,\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"DELETE\",\n        url: `${this.pathname}/force`,\n        data: request,\n      },\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public async restore(\n    request: DeleteRequest,\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/restore`,\n        data: request,\n      },\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAmBO,MAAe,SAAoC;AAAA,EAMxD,YACE,UACA,QACA,kBACA;AATQ;AACA;AACA;AACO;AAOV,SAAA,OAAO,WAAW,YAAY,gBAAgB;AACnD,SAAK,WAAW;AAChB,SAAK,SAAS;AACT,SAAA,YAAY,SAAS,YAAY;AACjC,SAAA,UAAU,WAAW,QAAQ;AAAA,EAAA;AAAA,EAGpC,IAAI,QAAmB;AACf,UAAA,UAAU,QAAQ,OAAU;AAClC,YAAQ,oBAAoB,CAAC,SAAS,KAAK,OAAO,IAAI,CAAC;AAChD,WAAA;AAAA,EAAA;AAAA,EAGT,IAAI,WAAsB;AACxB,WAAO,KAAK;AAAA,EAAA;AAAA,EAGN,aAAa,MAAgC;AAC5C,WAAA,KAAK,IAAI,CAAC,SAAS;AACxB,YAAM,SAAS,KAAK,OAAO,UAAU,IAAI;AACrC,UAAA,CAAC,OAAO,SAAS;AACnB,gBAAQ,MAAM,2BAA2B,OAAO,MAAM,MAAM;AAC5D,cAAM,IAAI;AAAA,UACR,2BAA2B,KAAK,UAAU,OAAO,MAAM,MAAM,CAAC;AAAA,QAChE;AAAA,MAAA;AAEF,aAAO,OAAO;AAAA,IAAA,CACf;AAAA,EAAA;AAAA,EAGH,MAAa,OACX,eAI2B;AAC3B,UAAM,OACJ,WAAW,gBAAgB,cAAc,MAAU,IAAA;AAE/C,UAAA,WAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB;AAAA,MAAA;AAAA,IAEJ;AAEO,WAAA;AAAA,EAAA;AAAA,EAGF,OACL,eACyB;AACzB,WAAO,KAAK,KAAK;AAAA,MACf;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ,YAAY,cAAc,MAAM;AAAA,QACrD,MAAM,cAAc;AAAA,MAAA;AAAA,IAExB;AAAA,EAAA;AAAA,EAGF,MAAa,OACX,SAC4B;AACtB,UAAA,WAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,KAAK;AAAA,QACV,MAAM;AAAA,MAAA;AAAA,IAEV;AAEO,WAAA;AAAA,MACL,GAAG;AAAA,MACH,MAAM,KAAK,aAAa,SAAS,IAAI;AAAA,IACvC;AAAA,EAAA;AAAA,EAGF,MAAa,YACX,SAC4B;AACtB,UAAA,WAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAM;AAAA,MAAA;AAAA,IAEV;AAEO,WAAA;AAAA,MACL,GAAG;AAAA,MACH,MAAM,KAAK,aAAa,SAAS,IAAI;AAAA,IACvC;AAAA,EAAA;AAAA,EAGF,MAAa,QACX,SAC4B;AACtB,UAAA,WAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAM;AAAA,MAAA;AAAA,IAEV;AAEO,WAAA;AAAA,MACL,GAAG;AAAA,MACH,MAAM,KAAK,aAAa,SAAS,IAAI;AAAA,IACvC;AAAA,EAAA;AAEJ;"}