{"version":3,"file":"Mutation.js","sources":["../../../src/mutation/Mutation.ts"],"sourcesContent":["import type {\n  ActionRequest,\n  ActionResponse,\n  BuilderWithCreationContext,\n  BuilderWithUpdateContext,\n  DeleteRequest,\n  DeleteResponse,\n  IModel,\n  IMutation,\n  MutationRequest,\n  MutationResponse,\n} from \"./types\";\nimport type { z } from \"zod\";\nimport type { RequestConfig } from \"@/http/types\";\nimport type { HttpRequest } from \"@/http/Request/HttpRequest\";\nimport { HttpClient } from \"@/http/HttpClient\";\nimport { Builder } from \"./builder/Builder\";\n\nexport abstract class Mutation<T> implements IMutation<T> {\n  protected http: HttpRequest;\n  protected pathname: string;\n  protected schema: z.ZodType<T>;\n\n  constructor (\n    pathname: string,\n    schema: z.ZodType<T>,\n    httpInstanceName?: string,\n  ) {\n    this.http = HttpClient.getInstance(httpInstanceName);\n    this.pathname = pathname;\n    this.schema = schema;\n  }\n\n  get model(): IModel<T> {\n    const builder = Builder.create<T>();\n    builder.setMutationFunction((data, options) => this.mutate(data, options));\n    return builder;\n  }\n\n  private validateData(data: Array<unknown>): Array<T> {\n    return data.map((item) => {\n      const result = this.schema.safeParse(item);\n      if (!result.success) {\n        console.error(\"Type validation failed:\", result.error.errors);\n        throw new Error(\n          `Type validation failed: ${JSON.stringify(result.error.errors)}`,\n        );\n      }\n      return result.data;\n    });\n  }\n\n  public async mutate(\n    mutateRequest:\n      | BuilderWithCreationContext<T>\n      | BuilderWithUpdateContext<T>\n      | MutationRequest<T, Record<string, unknown>>,\n    options?: Partial<RequestConfig>,\n  ): Promise<MutationResponse> {\n    const data =\n      \"build\" in mutateRequest ? mutateRequest.build() : mutateRequest;\n\n    const response = await this.http.request<MutationResponse>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/mutate`,\n        data,\n      },\n      options,\n    );\n\n    return response;\n  }\n\n  public action(\n    actionRequest: ActionRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<ActionResponse> {\n    return this.http.request<ActionResponse>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/actions/${actionRequest.action}`,\n        data: actionRequest.payload,\n      },\n      options,\n    );\n  }\n\n  public async delete(\n    request: DeleteRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"DELETE\",\n        url: this.pathname,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public async forceDelete(\n    request: DeleteRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"DELETE\",\n        url: `${this.pathname}/force`,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n\n  public async restore(\n    request: DeleteRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<DeleteResponse<T>> {\n    const response = await this.http.request<DeleteResponse<T>>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/restore`,\n        data: request,\n      },\n      options,\n    );\n\n    return {\n      ...response,\n      data: this.validateData(response.data),\n    };\n  }\n}"],"names":[],"mappings":";;;;;AAkBO,MAAe,SAAoC;AAAA,EAKxD,YACE,UACA,QACA,kBACA;AARQ;AACA;AACA;AAOH,SAAA,OAAO,WAAW,YAAY,gBAAgB;AACnD,SAAK,WAAW;AAChB,SAAK,SAAS;AAAA,EAAA;AAAA,EAGhB,IAAI,QAAmB;AACf,UAAA,UAAU,QAAQ,OAAU;AAC1B,YAAA,oBAAoB,CAAC,MAAM,YAAY,KAAK,OAAO,MAAM,OAAO,CAAC;AAClE,WAAA;AAAA,EAAA;AAAA,EAGD,aAAa,MAAgC;AAC5C,WAAA,KAAK,IAAI,CAAC,SAAS;AACxB,YAAM,SAAS,KAAK,OAAO,UAAU,IAAI;AACrC,UAAA,CAAC,OAAO,SAAS;AACnB,gBAAQ,MAAM,2BAA2B,OAAO,MAAM,MAAM;AAC5D,cAAM,IAAI;AAAA,UACR,2BAA2B,KAAK,UAAU,OAAO,MAAM,MAAM,CAAC;AAAA,QAChE;AAAA,MAAA;AAEF,aAAO,OAAO;AAAA,IAAA,CACf;AAAA,EAAA;AAAA,EAGH,MAAa,OACX,eAIA,SAC2B;AAC3B,UAAM,OACJ,WAAW,gBAAgB,cAAc,MAAU,IAAA;AAE/C,UAAA,WAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAEO,WAAA;AAAA,EAAA;AAAA,EAGF,OACL,eACA,UAAkC,IACT;AACzB,WAAO,KAAK,KAAK;AAAA,MACf;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ,YAAY,cAAc,MAAM;AAAA,QACrD,MAAM,cAAc;AAAA,MACtB;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAAA,EAGF,MAAa,OACX,SACA,UAAkC,IACN;AACtB,UAAA,WAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,KAAK;AAAA,QACV,MAAM;AAAA,MACR;AAAA,MACA;AAAA,IACF;AAEO,WAAA;AAAA,MACL,GAAG;AAAA,MACH,MAAM,KAAK,aAAa,SAAS,IAAI;AAAA,IACvC;AAAA,EAAA;AAAA,EAGF,MAAa,YACX,SACA,UAAkC,IACN;AACtB,UAAA,WAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAM;AAAA,MACR;AAAA,MACA;AAAA,IACF;AAEO,WAAA;AAAA,MACL,GAAG;AAAA,MACH,MAAM,KAAK,aAAa,SAAS,IAAI;AAAA,IACvC;AAAA,EAAA;AAAA,EAGF,MAAa,QACX,SACA,UAAkC,IACN;AACtB,UAAA,WAAW,MAAM,KAAK,KAAK;AAAA,MAC/B;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAM;AAAA,MACR;AAAA,MACA;AAAA,IACF;AAEO,WAAA;AAAA,MACL,GAAG;AAAA,MACH,MAAM,KAAK,aAAa,SAAS,IAAI;AAAA,IACvC;AAAA,EAAA;AAEJ;"}