{"version":3,"file":"Model.js","sources":["../../../../src/mutation/builder/Model.ts"],"sourcesContent":["import { RequestConfig } from \"@/http\";\nimport { BuilderWithCreationContext, BuilderWithUpdateContext, ExtractModelAttributes, IModel, MutationFunction, MutationRequest, MutationResponse, SimpleKey, StrictCreateRelationsMap, StrictUpdateRelationsMap, TypedMutationOperation } from \"../types\";\nimport { CreationRelation } from \"./CreationRelation\";\nimport { UpdateRelation } from \"./UpdateRelation\";\n\n\nexport class Model<TModel> implements IModel<TModel> {\n  private operations: Array<\n    TypedMutationOperation<TModel, Record<string, unknown>>\n  > = [];\n  private mutationFn: MutationFunction<TModel> | null = null;\n\n  // Instances distinctes pour chaque contexte\n  private creationRelation = new CreationRelation();\n  private updateRelation = new UpdateRelation();\n\n  public setMutationFunction(fn: MutationFunction<TModel>): void {\n    this.mutationFn = fn;\n  }\n\n  public create<\n    T extends Record<string, unknown>,\n    TRelationKeys extends keyof T = never,\n  >(params: {\n    attributes: T;\n    relations?: StrictCreateRelationsMap<\n      Record<Extract<TRelationKeys, string>, unknown>\n    >;\n  }): BuilderWithCreationContext<TModel> {\n    const { attributes, relations = {} } = params;\n\n    const operation: TypedMutationOperation<TModel, Record<string, unknown>> = {\n      operation: \"create\",\n      attributes: attributes as ExtractModelAttributes<TModel>,\n      relations: relations as Record<string, unknown>,\n    };\n\n    this.operations.push(operation);\n\n    return {\n      build: this.build.bind(this),\n      mutate: this.mutate.bind(this),\n      relation: this.creationRelation, // Contexte de création uniquement\n    };\n  }\n\n  public update<\n    T extends Record<string, unknown>,\n    TRelationKeys extends keyof T = never,\n  >(\n    key: SimpleKey,\n    params: {\n      attributes?: T;\n      relations?: StrictUpdateRelationsMap<\n        Record<Extract<TRelationKeys, string>, unknown>\n      >;\n    },\n  ): BuilderWithUpdateContext<TModel> {\n    const { attributes = {} as T, relations = {} } = params;\n\n    const operation: TypedMutationOperation<TModel, Record<string, unknown>> = {\n      operation: \"update\",\n      key,\n      attributes: attributes as ExtractModelAttributes<TModel>,\n      relations: relations as Record<string, unknown>,\n    };\n\n    this.operations.push(operation);\n\n    return {\n      build: this.build.bind(this),\n      mutate: this.mutate.bind(this),\n      relation: this.updateRelation, // Contexte de mise à jour complet\n    };\n  }\n\n  private build(): MutationRequest<TModel, Record<string, unknown>> {\n    const result = [...this.operations];\n    this.operations = [];\n    return { mutate: result };\n  }\n\n  private async mutate(\n    options?: Partial<RequestConfig>,\n  ): Promise<MutationResponse> {\n    if (!this.mutationFn) {\n      throw new Error(\"Mutation function not provided to builder\");\n    }\n\n    const data = this.build();\n    return this.mutationFn(data, options);\n  }\n}"],"names":[],"mappings":";;;;;AAMO,MAAM,MAAwC;AAAA,EAA9C;AACG,sCAEJ,CAAC;AACG,sCAA8C;AAG9C;AAAA,4CAAmB,IAAI,iBAAiB;AACxC,0CAAiB,IAAI,eAAe;AAAA;AAAA,EAErC,oBAAoB,IAAoC;AAC7D,SAAK,aAAa;AAAA,EAAA;AAAA,EAGb,OAGL,QAKqC;AACrC,UAAM,EAAE,YAAY,YAAY,CAAA,EAAO,IAAA;AAEvC,UAAM,YAAqE;AAAA,MACzE,WAAW;AAAA,MACX;AAAA,MACA;AAAA,IACF;AAEK,SAAA,WAAW,KAAK,SAAS;AAEvB,WAAA;AAAA,MACL,OAAO,KAAK,MAAM,KAAK,IAAI;AAAA,MAC3B,QAAQ,KAAK,OAAO,KAAK,IAAI;AAAA,MAC7B,UAAU,KAAK;AAAA;AAAA,IACjB;AAAA,EAAA;AAAA,EAGK,OAIL,KACA,QAMkC;AAClC,UAAM,EAAE,aAAa,CAAA,GAAS,YAAY,CAAA,EAAO,IAAA;AAEjD,UAAM,YAAqE;AAAA,MACzE,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEK,SAAA,WAAW,KAAK,SAAS;AAEvB,WAAA;AAAA,MACL,OAAO,KAAK,MAAM,KAAK,IAAI;AAAA,MAC3B,QAAQ,KAAK,OAAO,KAAK,IAAI;AAAA,MAC7B,UAAU,KAAK;AAAA;AAAA,IACjB;AAAA,EAAA;AAAA,EAGM,QAA0D;AAChE,UAAM,SAAS,CAAC,GAAG,KAAK,UAAU;AAClC,SAAK,aAAa,CAAC;AACZ,WAAA,EAAE,QAAQ,OAAO;AAAA,EAAA;AAAA,EAG1B,MAAc,OACZ,SAC2B;AACvB,QAAA,CAAC,KAAK,YAAY;AACd,YAAA,IAAI,MAAM,2CAA2C;AAAA,IAAA;AAGvD,UAAA,OAAO,KAAK,MAAM;AACjB,WAAA,KAAK,WAAW,MAAM,OAAO;AAAA,EAAA;AAExC;"}