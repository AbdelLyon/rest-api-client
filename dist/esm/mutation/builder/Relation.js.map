{"version":3,"file":"Relation.js","sources":["../../../../src/mutation/builder/Relation.ts"],"sourcesContent":["import type {\n  Attributes,\n  AttachRelationDefinition,\n  BaseRelationDefinition,\n  CreateRelationOperation,\n  CreateRelationParams,\n  DetachRelationDefinition,\n  IRelation,\n  SimpleKey,\n  SyncParams,\n  SyncRelationDefinition,\n  ToggleParams,\n  ToggleRelationDefinition,\n  UpdateRelationOperation,\n  UpdateRelationParams,\n  CreateValidRelationOperation,\n} from \"../types\";\n\nexport class Relation implements IRelation {\n  private context: \"create\" | \"update\" = \"update\"; // Par défaut en mode mise à jour\n\n  // Définir le contexte\n  public setContext(context: \"create\" | \"update\"): void {\n    this.context = context;\n  }\n\n  // Méthodes toujours disponibles\n  public add<T extends Attributes, TRelationKey extends keyof T = never>(\n    params: CreateRelationParams<T, TRelationKey>,\n  ): CreateRelationOperation<T> {\n    const { attributes, relations = {} } = params;\n\n    const relationDefinition: CreateRelationOperation<T> = {\n      operation: \"create\",\n      attributes,\n      relations: relations as Record<string, CreateValidRelationOperation> | undefined,\n    };\n\n    this.defineRelationDefinition(relationDefinition);\n    return relationDefinition;\n  }\n\n  public attach(key: SimpleKey): AttachRelationDefinition {\n    const result: AttachRelationDefinition = {\n      operation: \"attach\",\n      key,\n    };\n\n    this.defineRelationDefinition(result);\n    return result;\n  }\n\n  // Méthodes disponibles uniquement en contexte de mise à jour\n  public edit<T extends Attributes, TRelationKey extends keyof T = never>(\n    params: UpdateRelationParams<T, TRelationKey>,\n  ): UpdateRelationOperation<T> {\n    this.checkUpdateContext(\"edit\");\n\n    const { key, attributes, relations = {} } = params;\n\n    const relationDefinition: UpdateRelationOperation<T> = {\n      operation: \"update\",\n      key,\n      attributes,\n      relations: relations as Record<string, UpdateRelationOperation<T>> | undefined,\n    };\n\n    this.defineRelationDefinition(relationDefinition);\n    return relationDefinition;\n  }\n\n  public detach(key: SimpleKey): DetachRelationDefinition {\n    this.checkUpdateContext(\"detach\");\n\n    const result: DetachRelationDefinition = {\n      operation: \"detach\",\n      key,\n    };\n\n    this.defineRelationDefinition(result);\n    return result;\n  }\n\n  public sync<T>(params: SyncParams<T>): SyncRelationDefinition<T> {\n    this.checkUpdateContext(\"sync\");\n\n    const { key, attributes, pivot, withoutDetaching } = params;\n\n    const result: SyncRelationDefinition<T> = {\n      operation: \"sync\",\n      key,\n      without_detaching: withoutDetaching,\n      ...(attributes && { attributes }),\n      ...(pivot && { pivot }),\n    };\n\n    this.defineRelationDefinition(result);\n    return result;\n  }\n\n  public toggle<T>(params: ToggleParams<T>): ToggleRelationDefinition<T> {\n    this.checkUpdateContext(\"toggle\");\n\n    const { key, attributes, pivot } = params;\n\n    const result: ToggleRelationDefinition<T> = {\n      operation: \"toggle\",\n      key,\n      ...(attributes && { attributes }),\n      ...(pivot && { pivot }),\n    };\n\n    this.defineRelationDefinition(result);\n    return result;\n  }\n\n  // Méthode privée pour vérifier le contexte\n  private checkUpdateContext(methodName: string): void {\n    if (this.context === \"create\") {\n      throw new Error(\n        `Cannot use method '${methodName}' in creation context. Only 'add' and 'attach' methods are allowed.`\n      );\n    }\n  }\n\n  private defineRelationDefinition(result: BaseRelationDefinition): void {\n    Object.defineProperty(result, \"__relationDefinition\", {\n      value: true,\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n  }\n}"],"names":[],"mappings":";;;AAkBO,MAAM,SAA8B;AAAA,EAApC;AACG,mCAA+B;AAAA;AAAA;AAAA;AAAA,EAGhC,WAAW,SAAoC;AACpD,SAAK,UAAU;AAAA,EAAA;AAAA;AAAA,EAIV,IACL,QAC4B;AAC5B,UAAM,EAAE,YAAY,YAAY,CAAA,EAAO,IAAA;AAEvC,UAAM,qBAAiD;AAAA,MACrD,WAAW;AAAA,MACX;AAAA,MACA;AAAA,IACF;AAEA,SAAK,yBAAyB,kBAAkB;AACzC,WAAA;AAAA,EAAA;AAAA,EAGF,OAAO,KAA0C;AACtD,UAAM,SAAmC;AAAA,MACvC,WAAW;AAAA,MACX;AAAA,IACF;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAAA;AAAA,EAIF,KACL,QAC4B;AAC5B,SAAK,mBAAmB,MAAM;AAE9B,UAAM,EAAE,KAAK,YAAY,YAAY,CAAA,EAAO,IAAA;AAE5C,UAAM,qBAAiD;AAAA,MACrD,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,SAAK,yBAAyB,kBAAkB;AACzC,WAAA;AAAA,EAAA;AAAA,EAGF,OAAO,KAA0C;AACtD,SAAK,mBAAmB,QAAQ;AAEhC,UAAM,SAAmC;AAAA,MACvC,WAAW;AAAA,MACX;AAAA,IACF;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGF,KAAQ,QAAkD;AAC/D,SAAK,mBAAmB,MAAM;AAE9B,UAAM,EAAE,KAAK,YAAY,OAAO,iBAAqB,IAAA;AAErD,UAAM,SAAoC;AAAA,MACxC,WAAW;AAAA,MACX;AAAA,MACA,mBAAmB;AAAA,MACnB,GAAI,cAAc,EAAE,WAAW;AAAA,MAC/B,GAAI,SAAS,EAAE,MAAM;AAAA,IACvB;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGF,OAAU,QAAsD;AACrE,SAAK,mBAAmB,QAAQ;AAEhC,UAAM,EAAE,KAAK,YAAY,MAAU,IAAA;AAEnC,UAAM,SAAsC;AAAA,MAC1C,WAAW;AAAA,MACX;AAAA,MACA,GAAI,cAAc,EAAE,WAAW;AAAA,MAC/B,GAAI,SAAS,EAAE,MAAM;AAAA,IACvB;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAAA;AAAA,EAID,mBAAmB,YAA0B;AAC/C,QAAA,KAAK,YAAY,UAAU;AAC7B,YAAM,IAAI;AAAA,QACR,sBAAsB,UAAU;AAAA,MAClC;AAAA,IAAA;AAAA,EACF;AAAA,EAGM,yBAAyB,QAAsC;AAC9D,WAAA,eAAe,QAAQ,wBAAwB;AAAA,MACpD,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,cAAc;AAAA,IAAA,CACf;AAAA,EAAA;AAEL;"}