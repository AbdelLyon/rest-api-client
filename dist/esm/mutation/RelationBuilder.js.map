{"version":3,"file":"RelationBuilder.js","sources":["../../../src/mutation/RelationBuilder.ts"],"sourcesContent":["import type {\n   AttachRelationDefinition,\n   CreateRelationOperation,\n   DetachRelationDefinition,\n   SyncRelationDefinition,\n   ToggleRelationDefinition,\n   UpdateRelationOperation,\n   ValidCreateNestedRelation,\n   ValidUpdateNestedRelation\n} from \"@/mutation/types/mutation\";\nimport type { IRelationBuilder } from \"@/mutation/interface/IRelationBuilder\";\n\nexport class RelationBuilder implements IRelationBuilder {\n   private defineRelationDefinition(result: Record<string, unknown>): void {\n      Object.defineProperty(result, '__relationDefinition', {\n         value: true,\n         enumerable: false,\n         writable: false,\n         configurable: true\n      });\n   }\n\n   private extractNestedRelations<T extends Record<string, unknown>>(\n      attributes: T\n   ): {\n      normalAttributes: Record<string, unknown>,\n      nestedRelations: Record<string, unknown>;\n   } {\n      const normalAttributes: Record<string, unknown> = {};\n      const nestedRelations: Record<string, unknown> = {};\n\n      for (const [key, value] of Object.entries(attributes)) {\n         if (value && typeof value === 'object' && 'operation' in value) {\n            nestedRelations[key] = value;\n         } else {\n            normalAttributes[key] = value;\n         }\n      }\n\n      return { normalAttributes, nestedRelations };\n   }\n\n   private addGetters(\n      relationDefinition: Record<string, unknown>,\n      normalAttributes: Record<string, unknown>\n   ): void {\n      for (const key of Object.keys(normalAttributes)) {\n         Object.defineProperty(relationDefinition, key, {\n            get() {\n               return normalAttributes[key];\n            },\n            enumerable: true\n         });\n      }\n   }\n\n   public createRelation<T extends Record<string, unknown>, TRelationKeys extends keyof T = never>(\n      attributes: T,\n      relations?: Record<TRelationKeys, ValidCreateNestedRelation<unknown>>\n   ): T & CreateRelationOperation<T> & {\n      relations?: Record<TRelationKeys, ValidCreateNestedRelation<unknown>>;\n   } {\n      const { normalAttributes, nestedRelations: initialNestedRelations } = this.extractNestedRelations(attributes);\n      const nestedRelations = relations\n         ? { ...initialNestedRelations, ...relations }\n         : initialNestedRelations;\n\n      const relationDefinition = {\n         operation: \"create\" as const,\n         attributes: normalAttributes as T,\n         ...(Object.keys(nestedRelations).length > 0 ? { relations: nestedRelations } : {})\n      } as T & CreateRelationOperation<T> & {\n         relations?: Record<TRelationKeys, ValidCreateNestedRelation<unknown>>;\n      };\n\n      this.defineRelationDefinition(relationDefinition);\n      this.addGetters(relationDefinition, normalAttributes);\n\n      return relationDefinition;\n   }\n\n   public updateRelation<T extends Record<string, unknown>, TRelationKeys extends keyof T = never>(\n      key: string | number,\n      attributes: T,\n      relations?: Record<TRelationKeys, ValidUpdateNestedRelation<unknown>>\n   ): T & UpdateRelationOperation<T> & {\n      operation: \"update\";\n      relations?: Record<TRelationKeys, ValidUpdateNestedRelation<unknown>>;\n   } {\n      const { normalAttributes, nestedRelations: initialNestedRelations } = this.extractNestedRelations(attributes);\n      const nestedRelations = relations\n         ? { ...initialNestedRelations, ...relations }\n         : initialNestedRelations;\n\n      const relationDefinition = {\n         operation: \"update\" as const,\n         key,\n         attributes: normalAttributes as T,\n         ...(Object.keys(nestedRelations).length > 0 ? { relations: nestedRelations } : {})\n      } as T & UpdateRelationOperation<T> & {\n         relations?: Record<TRelationKeys, ValidUpdateNestedRelation<unknown>>;\n      };\n\n      this.defineRelationDefinition(relationDefinition);\n      this.addGetters(relationDefinition, normalAttributes);\n\n      return relationDefinition;\n   }\n\n   public attach(key: string | number): AttachRelationDefinition {\n      const result = {\n         operation: \"attach\" as const,\n         key\n      };\n\n      this.defineRelationDefinition(result);\n      return result;\n   }\n\n   public detach(key: string | number): DetachRelationDefinition {\n      const result = {\n         operation: \"detach\" as const,\n         key\n      };\n\n      this.defineRelationDefinition(result);\n      return result;\n   }\n\n   public sync<T>(\n      key: string | number | Array<string | number>,\n      attributes?: T,\n      pivot?: Record<string, string | number>,\n      withoutDetaching?: boolean\n   ): SyncRelationDefinition<T> {\n      const result = {\n         operation: \"sync\" as const,\n         key,\n         without_detaching: withoutDetaching,\n         ...(attributes && { attributes }),\n         ...(pivot && { pivot })\n      };\n\n      this.defineRelationDefinition(result);\n      return result;\n   }\n\n   public toggle<T>(\n      key: string | number | Array<string | number>,\n      attributes?: T,\n      pivot?: Record<string, string | number>\n   ): ToggleRelationDefinition<T> {\n      const result = {\n         operation: \"toggle\" as const,\n         key,\n         ...(attributes && { attributes }),\n         ...(pivot && { pivot })\n      };\n\n      this.defineRelationDefinition(result);\n      return result;\n   }\n}"],"names":[],"mappings":"AAYO,MAAM,gBAA4C;AAAA,EAC9C,yBAAyB,QAAuC;AAC9D,WAAA,eAAe,QAAQ,wBAAwB;AAAA,MACnD,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,cAAc;AAAA,IAAA,CAChB;AAAA,EAAA;AAAA,EAGI,uBACL,YAID;AACC,UAAM,mBAA4C,CAAC;AACnD,UAAM,kBAA2C,CAAC;AAElD,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AACpD,UAAI,SAAS,OAAO,UAAU,YAAY,eAAe,OAAO;AAC7D,wBAAgB,GAAG,IAAI;AAAA,MAAA,OACnB;AACJ,yBAAiB,GAAG,IAAI;AAAA,MAAA;AAAA,IAC3B;AAGI,WAAA,EAAE,kBAAkB,gBAAgB;AAAA,EAAA;AAAA,EAGtC,WACL,oBACA,kBACK;AACL,eAAW,OAAO,OAAO,KAAK,gBAAgB,GAAG;AACvC,aAAA,eAAe,oBAAoB,KAAK;AAAA,QAC5C,MAAM;AACH,iBAAO,iBAAiB,GAAG;AAAA,QAC9B;AAAA,QACA,YAAY;AAAA,MAAA,CACd;AAAA,IAAA;AAAA,EACJ;AAAA,EAGI,eACJ,YACA,WAGD;AACC,UAAM,EAAE,kBAAkB,iBAAiB,uBAA2B,IAAA,KAAK,uBAAuB,UAAU;AAC5G,UAAM,kBAAkB,YACnB,EAAE,GAAG,wBAAwB,GAAG,cAChC;AAEL,UAAM,qBAAqB;AAAA,MACxB,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,GAAI,OAAO,KAAK,eAAe,EAAE,SAAS,IAAI,EAAE,WAAW,oBAAoB,CAAA;AAAA,IAClF;AAIA,SAAK,yBAAyB,kBAAkB;AAC3C,SAAA,WAAW,oBAAoB,gBAAgB;AAE7C,WAAA;AAAA,EAAA;AAAA,EAGH,eACJ,KACA,YACA,WAID;AACC,UAAM,EAAE,kBAAkB,iBAAiB,uBAA2B,IAAA,KAAK,uBAAuB,UAAU;AAC5G,UAAM,kBAAkB,YACnB,EAAE,GAAG,wBAAwB,GAAG,cAChC;AAEL,UAAM,qBAAqB;AAAA,MACxB,WAAW;AAAA,MACX;AAAA,MACA,YAAY;AAAA,MACZ,GAAI,OAAO,KAAK,eAAe,EAAE,SAAS,IAAI,EAAE,WAAW,oBAAoB,CAAA;AAAA,IAClF;AAIA,SAAK,yBAAyB,kBAAkB;AAC3C,SAAA,WAAW,oBAAoB,gBAAgB;AAE7C,WAAA;AAAA,EAAA;AAAA,EAGH,OAAO,KAAgD;AAC3D,UAAM,SAAS;AAAA,MACZ,WAAW;AAAA,MACX;AAAA,IACH;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGH,OAAO,KAAgD;AAC3D,UAAM,SAAS;AAAA,MACZ,WAAW;AAAA,MACX;AAAA,IACH;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGH,KACJ,KACA,YACA,OACA,kBAC0B;AAC1B,UAAM,SAAS;AAAA,MACZ,WAAW;AAAA,MACX;AAAA,MACA,mBAAmB;AAAA,MACnB,GAAI,cAAc,EAAE,WAAW;AAAA,MAC/B,GAAI,SAAS,EAAE,MAAM;AAAA,IACxB;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGH,OACJ,KACA,YACA,OAC4B;AAC5B,UAAM,SAAS;AAAA,MACZ,WAAW;AAAA,MACX;AAAA,MACA,GAAI,cAAc,EAAE,WAAW;AAAA,MAC/B,GAAI,SAAS,EAAE,MAAM;AAAA,IACxB;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAEb;"}