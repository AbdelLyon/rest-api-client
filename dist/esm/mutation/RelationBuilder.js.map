{"version":3,"file":"RelationBuilder.js","sources":["../../../src/mutation/RelationBuilder.ts"],"sourcesContent":["import type {\n  AttachRelationDefinition,\n  CreateRelationOperation,\n  DetachRelationDefinition,\n  SyncRelationDefinition,\n  ToggleRelationDefinition,\n  UpdateRelationOperation,\n  ValidCreateNestedRelation,\n  ValidUpdateNestedRelation,\n} from \"@/mutation/types/mutation\";\nimport type { IRelationBuilder } from \"@/mutation/types/IRelationBuilder\";\n\nexport class RelationBuilder implements IRelationBuilder {\n  private defineRelationDefinition(result: Record<string, unknown>): void {\n    Object.defineProperty(result, \"__relationDefinition\", {\n      value: true,\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n  }\n\n  private extractNestedRelations<T extends Record<string, unknown>>(\n    attributes: T,\n  ): {\n    normalAttributes: Record<string, unknown>;\n    nestedRelations: Record<string, unknown>;\n  } {\n    const normalAttributes: Record<string, unknown> = {};\n    const nestedRelations: Record<string, unknown> = {};\n\n    for (const [key, value] of Object.entries(attributes)) {\n      if (value && typeof value === \"object\" && \"operation\" in value) {\n        nestedRelations[key] = value;\n      } else {\n        normalAttributes[key] = value;\n      }\n    }\n\n    return { normalAttributes, nestedRelations };\n  }\n\n  private addGetters(\n    relationDefinition: Record<string, unknown>,\n    normalAttributes: Record<string, unknown>,\n  ): void {\n    for (const key of Object.keys(normalAttributes)) {\n      Object.defineProperty(relationDefinition, key, {\n        get() {\n          return normalAttributes[key];\n        },\n        enumerable: true,\n      });\n    }\n  }\n\n  public createRelation<\n    T extends Record<string, unknown>,\n    TRelationKeys extends keyof T = never,\n  >(\n    attributes: T,\n    relations?: Record<TRelationKeys, ValidCreateNestedRelation<unknown>>,\n  ): T &\n    CreateRelationOperation<T> & {\n      relations?: Record<TRelationKeys, ValidCreateNestedRelation<unknown>>;\n    } {\n    const { normalAttributes, nestedRelations: initialNestedRelations } =\n      this.extractNestedRelations(attributes);\n    const nestedRelations = relations\n      ? { ...initialNestedRelations, ...relations }\n      : initialNestedRelations;\n\n    const relationDefinition = {\n      operation: \"create\" as const,\n      attributes: normalAttributes as T,\n      ...(Object.keys(nestedRelations).length > 0\n        ? { relations: nestedRelations }\n        : {}),\n    } as T &\n      CreateRelationOperation<T> & {\n        relations?: Record<TRelationKeys, ValidCreateNestedRelation<unknown>>;\n      };\n\n    this.defineRelationDefinition(relationDefinition);\n    this.addGetters(relationDefinition, normalAttributes);\n\n    return relationDefinition;\n  }\n\n  public updateRelation<\n    T extends Record<string, unknown>,\n    TRelationKeys extends keyof T = never,\n  >(\n    key: string | number,\n    attributes: T,\n    relations?: Record<TRelationKeys, ValidUpdateNestedRelation<unknown>>,\n  ): T &\n    UpdateRelationOperation<T> & {\n      operation: \"update\";\n      relations?: Record<TRelationKeys, ValidUpdateNestedRelation<unknown>>;\n    } {\n    const { normalAttributes, nestedRelations: initialNestedRelations } =\n      this.extractNestedRelations(attributes);\n    const nestedRelations = relations\n      ? { ...initialNestedRelations, ...relations }\n      : initialNestedRelations;\n\n    const relationDefinition = {\n      operation: \"update\" as const,\n      key,\n      attributes: normalAttributes as T,\n      ...(Object.keys(nestedRelations).length > 0\n        ? { relations: nestedRelations }\n        : {}),\n    } as T &\n      UpdateRelationOperation<T> & {\n        relations?: Record<TRelationKeys, ValidUpdateNestedRelation<unknown>>;\n      };\n\n    this.defineRelationDefinition(relationDefinition);\n    this.addGetters(relationDefinition, normalAttributes);\n\n    return relationDefinition;\n  }\n\n  public attach(key: string | number): AttachRelationDefinition {\n    const result = {\n      operation: \"attach\" as const,\n      key,\n    };\n\n    this.defineRelationDefinition(result);\n    return result;\n  }\n\n  public detach(key: string | number): DetachRelationDefinition {\n    const result = {\n      operation: \"detach\" as const,\n      key,\n    };\n\n    this.defineRelationDefinition(result);\n    return result;\n  }\n\n  public sync<T>(\n    key: string | number | Array<string | number>,\n    attributes?: T,\n    pivot?: Record<string, string | number>,\n    withoutDetaching?: boolean,\n  ): SyncRelationDefinition<T> {\n    const result = {\n      operation: \"sync\" as const,\n      key,\n      without_detaching: withoutDetaching,\n      ...(attributes && { attributes }),\n      ...(pivot && { pivot }),\n    };\n\n    this.defineRelationDefinition(result);\n    return result;\n  }\n\n  public toggle<T>(\n    key: string | number | Array<string | number>,\n    attributes?: T,\n    pivot?: Record<string, string | number>,\n  ): ToggleRelationDefinition<T> {\n    const result = {\n      operation: \"toggle\" as const,\n      key,\n      ...(attributes && { attributes }),\n      ...(pivot && { pivot }),\n    };\n\n    this.defineRelationDefinition(result);\n    return result;\n  }\n}\n"],"names":[],"mappings":"AAYO,MAAM,gBAA4C;AAAA,EAC/C,yBAAyB,QAAuC;AAC/D,WAAA,eAAe,QAAQ,wBAAwB;AAAA,MACpD,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,cAAc;AAAA,IAAA,CACf;AAAA,EAAA;AAAA,EAGK,uBACN,YAIA;AACA,UAAM,mBAA4C,CAAC;AACnD,UAAM,kBAA2C,CAAC;AAElD,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AACrD,UAAI,SAAS,OAAO,UAAU,YAAY,eAAe,OAAO;AAC9D,wBAAgB,GAAG,IAAI;AAAA,MAAA,OAClB;AACL,yBAAiB,GAAG,IAAI;AAAA,MAAA;AAAA,IAC1B;AAGK,WAAA,EAAE,kBAAkB,gBAAgB;AAAA,EAAA;AAAA,EAGrC,WACN,oBACA,kBACM;AACN,eAAW,OAAO,OAAO,KAAK,gBAAgB,GAAG;AACxC,aAAA,eAAe,oBAAoB,KAAK;AAAA,QAC7C,MAAM;AACJ,iBAAO,iBAAiB,GAAG;AAAA,QAC7B;AAAA,QACA,YAAY;AAAA,MAAA,CACb;AAAA,IAAA;AAAA,EACH;AAAA,EAGK,eAIL,YACA,WAIE;AACF,UAAM,EAAE,kBAAkB,iBAAiB,uBACzC,IAAA,KAAK,uBAAuB,UAAU;AACxC,UAAM,kBAAkB,YACpB,EAAE,GAAG,wBAAwB,GAAG,cAChC;AAEJ,UAAM,qBAAqB;AAAA,MACzB,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,GAAI,OAAO,KAAK,eAAe,EAAE,SAAS,IACtC,EAAE,WAAW,oBACb,CAAA;AAAA,IACN;AAKA,SAAK,yBAAyB,kBAAkB;AAC3C,SAAA,WAAW,oBAAoB,gBAAgB;AAE7C,WAAA;AAAA,EAAA;AAAA,EAGF,eAIL,KACA,YACA,WAKE;AACF,UAAM,EAAE,kBAAkB,iBAAiB,uBACzC,IAAA,KAAK,uBAAuB,UAAU;AACxC,UAAM,kBAAkB,YACpB,EAAE,GAAG,wBAAwB,GAAG,cAChC;AAEJ,UAAM,qBAAqB;AAAA,MACzB,WAAW;AAAA,MACX;AAAA,MACA,YAAY;AAAA,MACZ,GAAI,OAAO,KAAK,eAAe,EAAE,SAAS,IACtC,EAAE,WAAW,oBACb,CAAA;AAAA,IACN;AAKA,SAAK,yBAAyB,kBAAkB;AAC3C,SAAA,WAAW,oBAAoB,gBAAgB;AAE7C,WAAA;AAAA,EAAA;AAAA,EAGF,OAAO,KAAgD;AAC5D,UAAM,SAAS;AAAA,MACb,WAAW;AAAA,MACX;AAAA,IACF;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGF,OAAO,KAAgD;AAC5D,UAAM,SAAS;AAAA,MACb,WAAW;AAAA,MACX;AAAA,IACF;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGF,KACL,KACA,YACA,OACA,kBAC2B;AAC3B,UAAM,SAAS;AAAA,MACb,WAAW;AAAA,MACX;AAAA,MACA,mBAAmB;AAAA,MACnB,GAAI,cAAc,EAAE,WAAW;AAAA,MAC/B,GAAI,SAAS,EAAE,MAAM;AAAA,IACvB;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAAA,EAGF,OACL,KACA,YACA,OAC6B;AAC7B,UAAM,SAAS;AAAA,MACb,WAAW;AAAA,MACX;AAAA,MACA,GAAI,cAAc,EAAE,WAAW;AAAA,MAC/B,GAAI,SAAS,EAAE,MAAM;AAAA,IACvB;AAEA,SAAK,yBAAyB,MAAM;AAC7B,WAAA;AAAA,EAAA;AAEX;"}