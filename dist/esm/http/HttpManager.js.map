{"version":3,"file":"HttpManager.js","sources":["../../../src/http/HttpManager.ts"],"sourcesContent":["import { HttpClient } from \"./HttpClient\";\nimport type { HttpConfig } from \"./types/http\";\n\nexport class HttpManager {\n  private static instances: Map<string, HttpClient> = new Map();\n  private static defaultInstanceName: string;\n\n  static init(config: {\n    httpConfig: HttpConfig;\n    instanceName: string;\n  }): HttpClient {\n    const { httpConfig, instanceName } = config;\n\n    if (!this.instances.has(instanceName)) {\n      const instance = new HttpClient();\n      instance.configure(httpConfig);\n      this.instances.set(instanceName, instance);\n\n      if (this.instances.size === 1) this.defaultInstanceName = instanceName;\n    }\n\n    return this.instances.get(instanceName)!;\n  }\n\n  static getInstance(instanceName?: string): HttpClient {\n    const name = instanceName || this.defaultInstanceName;\n\n    if (!this.instances.has(name)) {\n      throw new Error(\n        `Http instance '${name}' not initialized. Call Http.init() first.`,\n      );\n    }\n    return this.instances.get(name)!;\n  }\n\n  static setDefaultInstance(instanceName: string): void {\n    if (!this.instances.has(instanceName)) {\n      throw new Error(\n        `Cannot set default: Http instance '${instanceName}' not initialized.`,\n      );\n    }\n    this.defaultInstanceName = instanceName;\n  }\n\n  static getAvailableInstances(): Array<string> {\n    return Array.from(this.instances.keys());\n  }\n\n  static resetInstance(instanceName?: string): void {\n    if (instanceName) {\n      this.instances.delete(instanceName);\n\n      if (\n        instanceName === this.defaultInstanceName &&\n        this.instances.size > 0\n      ) {\n        this.defaultInstanceName =\n          this.instances.keys().next().value ?? \"default\";\n      }\n    } else {\n      this.instances.clear();\n      this.defaultInstanceName = \"default\";\n    }\n  }\n}\n"],"names":[],"mappings":";;;;AAGO,MAAM,YAAY;AAAA,EAIvB,OAAO,KAAK,QAGG;AACP,UAAA,EAAE,YAAY,aAAA,IAAiB;AAErC,QAAI,CAAC,KAAK,UAAU,IAAI,YAAY,GAAG;AAC/B,YAAA,WAAW,IAAI,WAAW;AAChC,eAAS,UAAU,UAAU;AACxB,WAAA,UAAU,IAAI,cAAc,QAAQ;AAEzC,UAAI,KAAK,UAAU,SAAS,QAAQ,sBAAsB;AAAA,IAAA;AAGrD,WAAA,KAAK,UAAU,IAAI,YAAY;AAAA,EAAA;AAAA,EAGxC,OAAO,YAAY,cAAmC;AAC9C,UAAA,OAAO,gBAAgB,KAAK;AAElC,QAAI,CAAC,KAAK,UAAU,IAAI,IAAI,GAAG;AAC7B,YAAM,IAAI;AAAA,QACR,kBAAkB,IAAI;AAAA,MACxB;AAAA,IAAA;AAEK,WAAA,KAAK,UAAU,IAAI,IAAI;AAAA,EAAA;AAAA,EAGhC,OAAO,mBAAmB,cAA4B;AACpD,QAAI,CAAC,KAAK,UAAU,IAAI,YAAY,GAAG;AACrC,YAAM,IAAI;AAAA,QACR,sCAAsC,YAAY;AAAA,MACpD;AAAA,IAAA;AAEF,SAAK,sBAAsB;AAAA,EAAA;AAAA,EAG7B,OAAO,wBAAuC;AAC5C,WAAO,MAAM,KAAK,KAAK,UAAU,MAAM;AAAA,EAAA;AAAA,EAGzC,OAAO,cAAc,cAA6B;AAChD,QAAI,cAAc;AACX,WAAA,UAAU,OAAO,YAAY;AAElC,UACE,iBAAiB,KAAK,uBACtB,KAAK,UAAU,OAAO,GACtB;AACA,aAAK,sBACH,KAAK,UAAU,OAAO,KAAA,EAAO,SAAS;AAAA,MAAA;AAAA,IAC1C,OACK;AACL,WAAK,UAAU,MAAM;AACrB,WAAK,sBAAsB;AAAA,IAAA;AAAA,EAC7B;AAEJ;AA5DE,cADW,aACI,aAAqC,oBAAI,IAAI;AAC5D,cAFW,aAEI;"}