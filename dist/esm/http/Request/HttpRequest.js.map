{"version":3,"file":"HttpRequest.js","sources":["../../../../src/http/Request/HttpRequest.ts"],"sourcesContent":["import { HttpHandler } from \"./HttpHandler\";\nimport { HttpError } from \"./HttpError\";\nimport type { ConfigOptions, IHttpRequest, RequestConfig } from \"@/http/types\";\nimport { HttpConfig } from \"@/http/Request/HttpConfig\";\nimport { HttpInterceptor } from \"@/http/Request/HttpInterceptor\";\n\nexport class HttpRequest implements IHttpRequest {\n  private baseURL = \"\";\n  private defaultTimeout = 10000;\n  private defaultHeaders: Record<string, string> = {};\n  private withCredentials = true;\n  private maxRetries = 3;\n  private handler: HttpHandler;\n\n  constructor() {\n    this.handler = new HttpHandler();\n  }\n\n  configure(options: ConfigOptions): void {\n    this.baseURL = HttpConfig.getFullBaseUrl(options);\n    this.defaultTimeout = options.timeout ?? 10000;\n    this.maxRetries = options.maxRetries ?? 3;\n    this.withCredentials = options.withCredentials ?? true;\n\n    this.defaultHeaders = {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      ...options.headers,\n    };\n\n    this.handler.configure({\n      baseURL: this.baseURL,\n      defaultTimeout: this.defaultTimeout,\n      defaultHeaders: this.defaultHeaders,\n      maxRetries: this.maxRetries,\n      withCredentials: this.withCredentials,\n    });\n\n    HttpInterceptor.setupDefaultErrorInterceptor(HttpConfig.logError);\n    HttpInterceptor.addInterceptors(options);\n  }\n\n  public async request<TResponse>(\n    config: Partial<RequestConfig> & { url: string },\n    options: Partial<RequestConfig> = {},\n  ): Promise<TResponse> {\n    try {\n      const mergedConfig = this.createMergedConfig(config, options);\n      const url = this.buildRequestUrl(mergedConfig.url);\n      const interceptedConfig = await HttpInterceptor.applyRequestInterceptors({\n        ...mergedConfig,\n        url,\n      });\n\n      const response = await this.handler.executeRequest(\n        url,\n        interceptedConfig,\n      );\n      const interceptedResponse =\n        await HttpInterceptor.applyResponseSuccessInterceptors(response);\n\n      return await this.handler.parseResponse<TResponse>(interceptedResponse);\n    } catch (error) {\n      return this.handleReqError(error, config, options);\n    }\n  }\n\n  private createMergedConfig(\n    config: Partial<RequestConfig> & { url: string },\n    options: Partial<RequestConfig>,\n  ): RequestConfig {\n    return {\n      method: \"GET\",\n      timeout: this.defaultTimeout,\n      ...config,\n      ...options,\n      headers: {\n        ...this.defaultHeaders,\n        ...(config.headers || {}),\n        ...(options.headers || {}),\n      },\n    };\n  }\n\n  private buildRequestUrl(requestUrl: string): string {\n    if (requestUrl.startsWith(\"http\")) {\n      return requestUrl;\n    }\n\n    const prefix = requestUrl.startsWith(\"/\") ? \"\" : \"/\";\n    return new URL(`${this.baseURL}${prefix}${requestUrl}`).toString();\n  }\n\n  private async handleReqError<T>(\n    error: unknown,\n    config: Partial<RequestConfig> & { url: string },\n    options: Partial<RequestConfig>,\n  ): Promise<T> {\n    const apiError =\n      error instanceof HttpError\n        ? error\n        : new HttpError(error, {\n            ...config,\n            ...options,\n            url: config.url,\n          });\n\n    throw await HttpInterceptor.applyResponseErrorInterceptors(apiError);\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAMO,MAAM,YAAoC;AAAA,EAQ/C,cAAc;AAPN,mCAAU;AACV,0CAAiB;AACjB,0CAAyC,CAAC;AAC1C,2CAAkB;AAClB,sCAAa;AACb;AAGD,SAAA,UAAU,IAAI,YAAY;AAAA,EAAA;AAAA,EAGjC,UAAU,SAA8B;AACjC,SAAA,UAAU,WAAW,eAAe,OAAO;AAC3C,SAAA,iBAAiB,QAAQ,WAAW;AACpC,SAAA,aAAa,QAAQ,cAAc;AACnC,SAAA,kBAAkB,QAAQ,mBAAmB;AAElD,SAAK,iBAAiB;AAAA,MACpB,gBAAgB;AAAA,MAChB,QAAQ;AAAA,MACR,GAAG,QAAQ;AAAA,IACb;AAEA,SAAK,QAAQ,UAAU;AAAA,MACrB,SAAS,KAAK;AAAA,MACd,gBAAgB,KAAK;AAAA,MACrB,gBAAgB,KAAK;AAAA,MACrB,YAAY,KAAK;AAAA,MACjB,iBAAiB,KAAK;AAAA,IAAA,CACvB;AAEe,oBAAA,6BAA6B,WAAW,QAAQ;AAChE,oBAAgB,gBAAgB,OAAO;AAAA,EAAA;AAAA,EAGzC,MAAa,QACX,QACA,UAAkC,IACd;AAChB,QAAA;AACF,YAAM,eAAe,KAAK,mBAAmB,QAAQ,OAAO;AAC5D,YAAM,MAAM,KAAK,gBAAgB,aAAa,GAAG;AAC3C,YAAA,oBAAoB,MAAM,gBAAgB,yBAAyB;AAAA,QACvE,GAAG;AAAA,QACH;AAAA,MAAA,CACD;AAEK,YAAA,WAAW,MAAM,KAAK,QAAQ;AAAA,QAClC;AAAA,QACA;AAAA,MACF;AACA,YAAM,sBACJ,MAAM,gBAAgB,iCAAiC,QAAQ;AAEjE,aAAO,MAAM,KAAK,QAAQ,cAAyB,mBAAmB;AAAA,aAC/D,OAAO;AACd,aAAO,KAAK,eAAe,OAAO,QAAQ,OAAO;AAAA,IAAA;AAAA,EACnD;AAAA,EAGM,mBACN,QACA,SACe;AACR,WAAA;AAAA,MACL,QAAQ;AAAA,MACR,SAAS,KAAK;AAAA,MACd,GAAG;AAAA,MACH,GAAG;AAAA,MACH,SAAS;AAAA,QACP,GAAG,KAAK;AAAA,QACR,GAAI,OAAO,WAAW,CAAC;AAAA,QACvB,GAAI,QAAQ,WAAW,CAAA;AAAA,MAAC;AAAA,IAE5B;AAAA,EAAA;AAAA,EAGM,gBAAgB,YAA4B;AAC9C,QAAA,WAAW,WAAW,MAAM,GAAG;AAC1B,aAAA;AAAA,IAAA;AAGT,UAAM,SAAS,WAAW,WAAW,GAAG,IAAI,KAAK;AAC1C,WAAA,IAAI,IAAI,GAAG,KAAK,OAAO,GAAG,MAAM,GAAG,UAAU,EAAE,EAAE,SAAS;AAAA,EAAA;AAAA,EAGnE,MAAc,eACZ,OACA,QACA,SACY;AACZ,UAAM,WACJ,iBAAiB,YACb,QACA,IAAI,UAAU,OAAO;AAAA,MACnB,GAAG;AAAA,MACH,GAAG;AAAA,MACH,KAAK,OAAO;AAAA,IAAA,CACb;AAED,UAAA,MAAM,gBAAgB,+BAA+B,QAAQ;AAAA,EAAA;AAEvE;"}