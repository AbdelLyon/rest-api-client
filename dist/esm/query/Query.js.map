{"version":3,"file":"Query.js","sources":["../../../src/query/Query.ts"],"sourcesContent":["import type { HttpRequest } from \"../http/Request/HttpRequest\";\nimport type {\n  DetailsResponse,\n  IQuery,\n  PaginatedSearchRequest,\n  SearchRequest,\n  SearchResponse,\n  ComparisonOperator,\n} from \"./types\";\nimport type { z } from \"zod\";\nimport { SearchBuilder } from \"./SearchBuilder\";\nimport { DetailsBuilder } from \"./DetailsBuilder\";\nimport { HttpClient } from \"@/http\";\n\ntype ExtractKeys<T> = keyof T & string;\n\ntype ValueForField<T, K extends keyof T> =\n  T[K] extends Array<infer U>\n    ? U | U[]\n    : T[K] extends (infer V)[]\n      ? V | V[]\n      : T[K];\n\nexport abstract class Query<T> implements IQuery<T> {\n  protected http: HttpRequest;\n  protected pathname: string;\n  protected schema: z.ZodType<T>;\n\n  constructor(\n    pathname: string,\n    schema: z.ZodType<T>,\n    httpInstanceName?: string,\n  ) {\n    this.http = HttpClient.getInstance(httpInstanceName);\n    this.pathname = pathname;\n    this.schema = schema;\n  }\n\n  private validateData(data: Array<unknown>): Array<T> {\n    return data.map((item) => {\n      const result = this.schema.safeParse(item);\n      if (!result.success) {\n        console.error(\"Type validation failed:\", result.error.errors);\n        throw new Error(\n          `Type validation failed: ${JSON.stringify(result.error.errors)}`,\n        );\n      }\n      return result.data;\n    });\n  }\n\n  private searchRequest(search: SearchRequest): Promise<SearchResponse<T>> {\n    return this.http.request<SearchResponse<T>>({\n      method: \"POST\",\n      url: `${this.pathname}/search`,\n      data: { search },\n    });\n  }\n\n  public async search<TResponse = Array<T>>(\n    search: SearchRequest | PaginatedSearchRequest,\n  ): Promise<TResponse> {\n    const response = await this.searchRequest(search);\n    const validatedData = this.validateData(response.data);\n\n    const isPaginated = \"page\" in search || \"limit\" in search;\n\n    if (isPaginated) {\n      return {\n        ...response,\n        data: validatedData,\n      } as unknown as TResponse;\n    }\n    return validatedData as unknown as TResponse;\n  }\n\n  public createSearchBuilder<U extends T = T>(): SearchBuilder<U> {\n    return new SearchBuilder<U>();\n  }\n\n  public async executeSearch<TResponse = Array<T>>(\n    builder: SearchBuilder<T>,\n  ): Promise<TResponse> {\n    return await this.search<TResponse>(builder.build());\n  }\n\n  public async searchByText<TResponse = Array<T>>(\n    text: string,\n    page?: number,\n    limit?: number,\n  ): Promise<TResponse> {\n    const builder = this.createSearchBuilder().withText(text);\n\n    if (page !== undefined && limit !== undefined) {\n      builder.withPagination(page, limit);\n    }\n\n    return this.executeSearch<TResponse>(builder);\n  }\n\n  public async searchByField<K extends ExtractKeys<T>, TResponse = Array<T>>(\n    field: K,\n    operator: ComparisonOperator,\n    value: ValueForField<T, K>,\n  ): Promise<TResponse> {\n    const builder = this.createSearchBuilder().withFilter(\n      field,\n      operator,\n      value,\n    );\n    return this.executeSearch<TResponse>(builder);\n  }\n\n  public createDetailsBuilder<U extends T = T>(): DetailsBuilder<U> {\n    return new DetailsBuilder<U>(this as IQuery<U>);\n  }\n\n  public details(): Promise<DetailsResponse> {\n    return this.http.request<DetailsResponse>({\n      method: \"GET\",\n      url: this.pathname,\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;;AAuBO,MAAe,MAA8B;AAAA,EAKlD,YACE,UACA,QACA,kBACA;AARQ;AACA;AACA;AAOH,SAAA,OAAO,WAAW,YAAY,gBAAgB;AACnD,SAAK,WAAW;AAChB,SAAK,SAAS;AAAA,EAAA;AAAA,EAGR,aAAa,MAAgC;AAC5C,WAAA,KAAK,IAAI,CAAC,SAAS;AACxB,YAAM,SAAS,KAAK,OAAO,UAAU,IAAI;AACrC,UAAA,CAAC,OAAO,SAAS;AACnB,gBAAQ,MAAM,2BAA2B,OAAO,MAAM,MAAM;AAC5D,cAAM,IAAI;AAAA,UACR,2BAA2B,KAAK,UAAU,OAAO,MAAM,MAAM,CAAC;AAAA,QAChE;AAAA,MAAA;AAEF,aAAO,OAAO;AAAA,IAAA,CACf;AAAA,EAAA;AAAA,EAGK,cAAc,QAAmD;AAChE,WAAA,KAAK,KAAK,QAA2B;AAAA,MAC1C,QAAQ;AAAA,MACR,KAAK,GAAG,KAAK,QAAQ;AAAA,MACrB,MAAM,EAAE,OAAO;AAAA,IAAA,CAChB;AAAA,EAAA;AAAA,EAGH,MAAa,OACX,QACoB;AACpB,UAAM,WAAW,MAAM,KAAK,cAAc,MAAM;AAChD,UAAM,gBAAgB,KAAK,aAAa,SAAS,IAAI;AAE/C,UAAA,cAAc,UAAU,UAAU,WAAW;AAEnD,QAAI,aAAa;AACR,aAAA;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,MACR;AAAA,IAAA;AAEK,WAAA;AAAA,EAAA;AAAA,EAGF,sBAAyD;AAC9D,WAAO,IAAI,cAAiB;AAAA,EAAA;AAAA,EAG9B,MAAa,cACX,SACoB;AACpB,WAAO,MAAM,KAAK,OAAkB,QAAQ,OAAO;AAAA,EAAA;AAAA,EAGrD,MAAa,aACX,MACA,MACA,OACoB;AACpB,UAAM,UAAU,KAAK,oBAAoB,EAAE,SAAS,IAAI;AAEpD,QAAA,SAAS,UAAa,UAAU,QAAW;AACrC,cAAA,eAAe,MAAM,KAAK;AAAA,IAAA;AAG7B,WAAA,KAAK,cAAyB,OAAO;AAAA,EAAA;AAAA,EAG9C,MAAa,cACX,OACA,UACA,OACoB;AACd,UAAA,UAAU,KAAK,oBAAA,EAAsB;AAAA,MACzC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACO,WAAA,KAAK,cAAyB,OAAO;AAAA,EAAA;AAAA,EAGvC,uBAA2D;AACzD,WAAA,IAAI,eAAkB,IAAiB;AAAA,EAAA;AAAA,EAGzC,UAAoC;AAClC,WAAA,KAAK,KAAK,QAAyB;AAAA,MACxC,QAAQ;AAAA,MACR,KAAK,KAAK;AAAA,IAAA,CACX;AAAA,EAAA;AAEL;"}