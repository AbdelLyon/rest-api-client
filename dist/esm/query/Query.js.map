{"version":3,"file":"Query.js","sources":["../../../src/query/Query.ts"],"sourcesContent":["import type { HttpRequest } from '../http/Request/HttpRequest';\nimport type {\n  DetailsResponse,\n  IQuery,\n  PaginatedSearchRequest,\n  SearchRequest,\n  SearchResponse,\n} from \"./types\";\nimport type { z } from \"zod\";\nimport type { RequestConfig } from \"@/http/types\";\nimport { HttpClient } from \"@/http/HttpClient\";\n\nexport abstract class Query<T> implements IQuery<T> {\n  protected http: HttpRequest;\n  protected pathname: string;\n  protected schema: z.ZodType<T>;\n\n  constructor (\n    pathname: string,\n    schema: z.ZodType<T>,\n    httpInstanceName?: string,\n  ) {\n    this.http = HttpClient.getInstance(httpInstanceName);\n    this.pathname = pathname;\n    this.schema = schema;\n  }\n\n  private validateData(data: Array<unknown>): Array<T> {\n    return data.map((item) => {\n      const result = this.schema.safeParse(item);\n      if (!result.success) {\n        console.error(\"Type validation failed:\", result.error.errors);\n        throw new Error(\n          `Type validation failed: ${JSON.stringify(result.error.errors)}`,\n        );\n      }\n      return result.data;\n    });\n  }\n\n  private searchRequest(\n    search: SearchRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<SearchResponse<T>> {\n    return this.http.request<SearchResponse<T>>(\n      {\n        method: \"POST\",\n        url: `${this.pathname}/search`,\n        data: { search },\n      },\n      options,\n    );\n  }\n\n  public async search<TResponse = Array<T>>(\n    search: SearchRequest | PaginatedSearchRequest,\n    options: Partial<RequestConfig> = {},\n  ): Promise<TResponse> {\n    const response = await this.searchRequest(search, options);\n    const validatedData = this.validateData(response.data);\n\n    const isPaginated = \"page\" in search || \"limit\" in search;\n\n    if (isPaginated) {\n      return {\n        ...response,\n        data: validatedData,\n      } as TResponse;\n    }\n    return validatedData as TResponse;\n  }\n\n  public details(\n    options: Partial<RequestConfig> = {},\n  ): Promise<DetailsResponse> {\n    return this.http.request<DetailsResponse>(\n      {\n        method: \"GET\",\n        url: this.pathname,\n      },\n      options,\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAYO,MAAe,MAA8B;AAAA,EAKlD,YACE,UACA,QACA,kBACA;AARQ;AACA;AACA;AAOH,SAAA,OAAO,WAAW,YAAY,gBAAgB;AACnD,SAAK,WAAW;AAChB,SAAK,SAAS;AAAA,EAAA;AAAA,EAGR,aAAa,MAAgC;AAC5C,WAAA,KAAK,IAAI,CAAC,SAAS;AACxB,YAAM,SAAS,KAAK,OAAO,UAAU,IAAI;AACrC,UAAA,CAAC,OAAO,SAAS;AACnB,gBAAQ,MAAM,2BAA2B,OAAO,MAAM,MAAM;AAC5D,cAAM,IAAI;AAAA,UACR,2BAA2B,KAAK,UAAU,OAAO,MAAM,MAAM,CAAC;AAAA,QAChE;AAAA,MAAA;AAEF,aAAO,OAAO;AAAA,IAAA,CACf;AAAA,EAAA;AAAA,EAGK,cACN,QACA,UAAkC,IACN;AAC5B,WAAO,KAAK,KAAK;AAAA,MACf;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,GAAG,KAAK,QAAQ;AAAA,QACrB,MAAM,EAAE,OAAO;AAAA,MACjB;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAAA,EAGF,MAAa,OACX,QACA,UAAkC,IACd;AACpB,UAAM,WAAW,MAAM,KAAK,cAAc,QAAQ,OAAO;AACzD,UAAM,gBAAgB,KAAK,aAAa,SAAS,IAAI;AAE/C,UAAA,cAAc,UAAU,UAAU,WAAW;AAEnD,QAAI,aAAa;AACR,aAAA;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,MACR;AAAA,IAAA;AAEK,WAAA;AAAA,EAAA;AAAA,EAGF,QACL,UAAkC,IACR;AAC1B,WAAO,KAAK,KAAK;AAAA,MACf;AAAA,QACE,QAAQ;AAAA,QACR,KAAK,KAAK;AAAA,MACZ;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAEJ;"}